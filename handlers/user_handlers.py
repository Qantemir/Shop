from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

from database.mongodb import db
from keyboards.user_kb import (
    main_menu,
    catalog_menu,
    product_actions_kb,
    cart_actions_kb,
    cart_item_kb,
    confirm_order_kb,
    help_menu,
    confirm_clear_cart_kb
)
from keyboards.admin_kb import order_management_kb
from config import ADMIN_ID, ADMIN_CARD

router = Router()

class OrderStates(StatesGroup):
    waiting_phone = State()
    waiting_address = State()
    waiting_payment = State()
    selecting_flavor = State()

class CancellationStates(StatesGroup):
    waiting_for_reason = State()

# Helper function to format price with decimal points
def format_price(price):
    return f"{float(price):.2f}"

@router.message(Command("start"))
async def cmd_start(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
    sleep_data = await db.get_sleep_mode()
    if sleep_data["enabled"]:
        end_time = sleep_data.get("end_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        # Create help button
        help_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")]
        ])
        await message.answer(
            f"üò¥ –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
            f"–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ {end_time}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –ø—Ä–∏–¥–µ—Ç.",
            reply_markup=help_button
        )
        return
        
    try:
        # Check if user already exists
        existing_user = await db.get_user(message.from_user.id)
        
        if not existing_user:
            user_data = {
                "user_id": message.from_user.id,
                "username": message.from_user.username,
                "first_name": message.from_user.first_name,
                "last_name": message.from_user.last_name,
                "cart": []
            }
            await db.create_user(user_data)
            print(f"[DEBUG] Created new user: {message.from_user.id}")
        
        # Create inline keyboard with help button
        help_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏", callback_data="show_help")]
        ])
        
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! \n"
            "–ù–∞—à –º–∞–≥–∞–∑–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 10:00 –¥–æ 02:00\n"
            "(–ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â—å)",
            reply_markup=help_button
        )
        
        # Send main menu separately
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        
    except Exception as e:
        print(f"[ERROR] Error in start command: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
    sleep_data = await db.get_sleep_mode()
    if sleep_data["enabled"]:
        end_time = sleep_data.get("end_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        help_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")]
        ])
        await message.answer(
            f"üò¥ –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
            f"–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ {end_time}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –ø—Ä–∏–¥–µ—Ç.",
            reply_markup=help_button
        )
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=catalog_menu()
    )

@router.callback_query(F.data.startswith("category_"))
async def show_category(callback: CallbackQuery, state: FSMContext):
    category = callback.data.replace("category_", "")
    products = await db.get_products_by_category(category)
    
    if not products:
        await callback.message.answer("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        return
    
    for product in products:
        caption = f"üì¶ {product['name']}\n"
        caption += f"üí∞ {format_price(product['price'])} Tg\n"
        caption += f"üìù {product['description']}"
        
        product_id = str(product['_id'])
        print(f"[DEBUG] Showing product with ID: {product_id}")
        
        keyboard = product_actions_kb(product_id, False, product.get('flavors', []))
        
        try:
            await callback.message.answer_photo(
                photo=product['photo'],
                caption=caption,
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"[ERROR] Error showing product {product_id}: {str(e)}")
            await callback.message.answer(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product['name']}"
            )
    
    await callback.answer()

@router.message(OrderStates.selecting_flavor)
async def handle_flavor_number(message: Message, state: FSMContext):
    try:
        # Get the number from message
        if not message.text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞")
            return
            
        number = int(message.text)
        
        # Get product data from state
        data = await state.get_data()
        product_id = data.get('current_product_id')
        flavors = data.get('current_product_flavors', [])
        
        if not product_id or not flavors:
            await message.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
            
        # Check if number is valid
        if number < 1 or number > len(flavors):
            await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(flavors)}")
            return
            
        # Get the selected flavor
        selected_flavor = flavors[number - 1]
        
        # Get product
        product = await db.get_product(product_id)
        if not product:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # Get or create user
        user = await db.get_user(message.from_user.id)
        if not user:
            user_data = {
                "user_id": message.from_user.id,
                "username": message.from_user.username,
                "first_name": message.from_user.first_name,
                "last_name": message.from_user.last_name,
                "cart": []
            }
            user = await db.create_user(user_data)
        
        # Initialize cart if needed
        cart = user.get('cart', [])
        if cart is None:
            cart = []
        
        # Check if product with same flavor already in cart
        found = False
        for item in cart:
            if item.get('product_id') == product_id and item.get('flavor') == selected_flavor:
                item['quantity'] += 1
                found = True
                break
        
        # Add new item if not found
        if not found:
            cart.append({
                'product_id': product_id,
                'name': product['name'],
                'price': product['price'],
                'quantity': 1,
                'flavor': selected_flavor
            })
        
        # Update cart
        await db.update_user(message.from_user.id, {'cart': cart})
        await message.answer(f"–¢–æ–≤–∞—Ä ({selected_flavor}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Error in handle_flavor_number: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∫—É—Å–∞")
        await state.clear()

@router.callback_query(F.data.startswith("select_flavor_"))
async def select_flavor(callback: CallbackQuery, state: FSMContext):
    print("[DEBUG] Starting select_flavor handler")
    try:
        # Get the full callback data
        full_data = callback.data
        print(f"[DEBUG] Full callback data: {full_data}")
        
        # Extract product_id and flavor correctly
        # Format is: select_flavor_PRODUCTID_FLAVOR
        # Remove 'select_flavor_' prefix first
        data_without_prefix = full_data.replace("select_flavor_", "")
        # Find the first underscore after product ID
        underscore_index = data_without_prefix.find("_")
        if underscore_index == -1:
            print("[DEBUG] Invalid callback data format")
            await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        product_id = data_without_prefix[:underscore_index]
        flavor = data_without_prefix[underscore_index + 1:]
        
        print(f"[DEBUG] Parsed product_id: {product_id}, flavor: {flavor}")
        
        # Get product first to validate it exists
        product = await db.get_product(product_id)
        print(f"[DEBUG] Retrieved product from DB: {product}")
        
        if not product:
            print(f"[DEBUG] Product not found in database: {product_id}")
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
            
        # Get or create user
        user = await db.get_user(callback.from_user.id)
        if not user:
            user_data = {
                "user_id": callback.from_user.id,
                "username": callback.from_user.username,
                "first_name": callback.from_user.first_name,
                "last_name": callback.from_user.last_name,
                "cart": []
            }
            user = await db.create_user(user_data)
            print(f"[DEBUG] Created new user: {user}")
        
        # Initialize cart if needed
        cart = user.get('cart', [])
        if cart is None:
            cart = []
        
        print(f"[DEBUG] Current cart before update: {cart}")
        
        # Check if product with same flavor already in cart
        found = False
        for item in cart:
            if str(item.get('product_id')) == str(product_id) and item.get('flavor') == flavor:
                item['quantity'] += 1
                found = True
                print(f"[DEBUG] Increased quantity for existing item: {item}")
                break
        
        # Add new item if not found
        if not found:
            new_item = {
                'product_id': str(product_id),
                'name': product['name'],
                'price': int(product['price']),
                'quantity': 1,
                'flavor': flavor
            }
            cart.append(new_item)
            print(f"[DEBUG] Added new item to cart: {new_item}")
        
        print(f"[DEBUG] Cart after update: {cart}")
        
        # Update user's cart in database
        result = await db.update_user(callback.from_user.id, {'cart': cart})
        print(f"[DEBUG] Database update result: {result}")
        
        if result:
            await callback.answer(f"–¢–æ–≤–∞—Ä ({flavor}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=True)
            # Show updated cart
            await show_cart_message(callback.message, user)
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)
        
    except Exception as e:
        print(f"[ERROR] Error in select_flavor: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    print("[DEBUG] Starting add_to_cart handler")
    try:
        product_id = callback.data.replace("add_to_cart_", "")
        print(f"[DEBUG] Attempting to add product with ID: {product_id}")
        
        # Get product first to validate it exists
        product = await db.get_product(product_id)
        print(f"[DEBUG] Retrieved product from DB: {product}")
        
        if not product:
            print(f"[DEBUG] Product not found in database: {product_id}")
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
            
        # If product has flavors, show flavor selection keyboard
        if 'flavors' in product and product['flavors']:
            keyboard = []
            for flavor in product['flavors']:
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"üåà {flavor}",
                        callback_data=f"select_flavor_{product_id}_{flavor}"
                    )
                ])
            keyboard.append([
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_catalog")
            ])
            
            await callback.message.edit_caption(
                caption=f"üì¶ {product['name']}\n"
                f"üí∞ {format_price(product['price'])} Tg\n"
                f"üìù {product['description']}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            await callback.answer()
            return
            
        # Get or create user
        user = await db.get_user(callback.from_user.id)
        if not user:
            user_data = {
                "user_id": callback.from_user.id,
                "username": callback.from_user.username,
                "first_name": callback.from_user.first_name,
                "last_name": callback.from_user.last_name,
                "cart": []
            }
            user = await db.create_user(user_data)
            print(f"[DEBUG] Created new user: {user}")
        
        # Initialize cart if needed
        cart = user.get('cart', [])
        if cart is None:
            cart = []
        
        print(f"[DEBUG] Current cart before update: {cart}")
        
        # Check if product already in cart
        found = False
        for item in cart:
            if str(item.get('product_id')) == str(product_id):
                item['quantity'] += 1
                found = True
                print(f"[DEBUG] Increased quantity for existing item: {item}")
                break
        
        # Add new item if not found
        if not found:
            new_item = {
                'product_id': str(product_id),
                'name': product['name'],
                'price': int(product['price']),
                'quantity': 1
            }
            cart.append(new_item)
            print(f"[DEBUG] Added new item to cart: {new_item}")
        
        print(f"[DEBUG] Cart after update: {cart}")
        
        # Update user's cart in database
        result = await db.update_user(callback.from_user.id, {'cart': cart})
        print(f"[DEBUG] Database update result: {result}")
        
        if result:
            await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=True)
            # Show updated cart
            await show_cart_message(callback.message, user)
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)
        
    except Exception as e:
        print(f"[ERROR] Error in add_to_cart: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)

async def show_cart_message(message, user):
    """Helper function to show cart contents"""
    if not user or not user.get('cart'):
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    cart = user['cart']
    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    
    for item in cart:
        subtotal = item['price'] * item['quantity']
        text += f"üì¶ {item['name']}"
        if 'flavor' in item:
            text += f" (üåà {item['flavor']})"
        text += f"\nüí∞ {format_price(item['price'])} Tg x {item['quantity']} = {format_price(subtotal)} Tg\n"
        text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        total += subtotal
    
    text += f"\nüíé –ò—Ç–æ–≥–æ: {format_price(total)} Tg"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")],
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")]
    ])
    
    await message.answer(text, reply_markup=keyboard)

@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
    sleep_data = await db.get_sleep_mode()
    if sleep_data["enabled"]:
        end_time = sleep_data.get("end_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        help_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")]
        ])
        await message.answer(
            f"üò¥ –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
            f"–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ {end_time}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –ø—Ä–∏–¥–µ—Ç.",
            reply_markup=help_button
        )
        return

    user = await db.get_user(message.from_user.id)
    await show_cart_message(message, user)

@router.callback_query(F.data.startswith("increase_"))
async def increase_item(callback: CallbackQuery):
    try:
        product_id = callback.data.replace("increase_", "")
        print(f"[DEBUG] Increasing quantity for product: {product_id}")
        
        user = await db.get_user(callback.from_user.id)
        if not user or not user.get('cart'):
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
            
        cart = user['cart']
        item = next((item for item in cart if item['product_id'] == product_id), None)
        
        if item:
            item['quantity'] += 1
            await db.update_user(callback.from_user.id, {'cart': cart})
            
            subtotal = item['price'] * item['quantity']
            await callback.message.edit_text(
                f"üì¶ {item['name']}\n"
                f"üí∞ {item['price']} Tg x {item['quantity']} = {format_price(subtotal)} Tg",
                reply_markup=cart_item_kb(product_id)
            )
            await callback.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ")
        else:
            print(f"[DEBUG] Item not found in cart: {product_id}")
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            
    except Exception as e:
        print(f"[ERROR] Error in increase_item: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("decrease_"))
async def decrease_item(callback: CallbackQuery):
    try:
        product_id = callback.data.replace("decrease_", "")
        print(f"[DEBUG] Decreasing quantity for product: {product_id}")
        
        user = await db.get_user(callback.from_user.id)
        if not user or not user.get('cart'):
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
            
        cart = user['cart']
        item = next((item for item in cart if item['product_id'] == product_id), None)
        
        if item:
            if item['quantity'] > 1:
                item['quantity'] -= 1
                await db.update_user(callback.from_user.id, {'cart': cart})
                
                subtotal = item['price'] * item['quantity']
                await callback.message.edit_text(
                    f"üì¶ {item['name']}\n"
                    f"üí∞ {item['price']} Tg x {item['quantity']} = {format_price(subtotal)} Tg",
                    reply_markup=cart_item_kb(product_id)
                )
                await callback.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")
            else:
                await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚ùå –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
        else:
            print(f"[DEBUG] Item not found in cart: {product_id}")
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            
    except Exception as e:
        print(f"[ERROR] Error in decrease_item: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("remove_"))
async def remove_item(callback: CallbackQuery):
    try:
        product_id = callback.data.replace("remove_", "")
        print(f"[DEBUG] Removing product from cart: {product_id}")
        
        user = await db.get_user(callback.from_user.id)
        if not user or not user.get('cart'):
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
            
        cart = user['cart']
        # Remove item with matching product_id
        cart = [item for item in cart if item['product_id'] != product_id]
        await db.update_user(callback.from_user.id, {'cart': cart})
        
        await callback.message.delete()
        await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        
        if not cart:
            await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=main_menu())
            
    except Exception as e:
        print(f"[ERROR] Error in remove_item: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "back_to_catalog")
async def back_to_catalog_handler(callback: CallbackQuery):
    try:
        # Delete the previous message with cart
        await callback.message.delete()
        
        # Show catalog menu
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=catalog_menu()
        )
        await callback.answer()
    except Exception as e:
        print(f"[ERROR] Error in back_to_catalog: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–∞–ª–æ–≥—É")

@router.callback_query(F.data == "confirm_clear_cart")
async def confirm_clear_cart(callback: CallbackQuery):
    try:
        await callback.message.edit_text(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?",
            reply_markup=confirm_clear_cart_kb()
        )
        await callback.answer()
    except Exception as e:
        print(f"[ERROR] Error in confirm_clear_cart: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    try:
        # Clear user's cart in database
        await db.update_user(callback.from_user.id, {'cart': []})
        
        # Delete all previous cart item messages
        message_id = callback.message.message_id
        chat_id = callback.message.chat.id
        
        # Try to delete recent messages that might be cart items
        for i in range(message_id - 10, message_id + 1):
            try:
                await callback.bot.delete_message(chat_id, i)
            except:
                continue
        
        # Show empty cart message
        await callback.message.answer(
            "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏.",
            reply_markup=main_menu()
        )
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
        
    except Exception as e:
        print(f"[ERROR] Error in clear_cart: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")

@router.callback_query(F.data == "cancel_clear_cart")
async def cancel_clear_cart(callback: CallbackQuery):
    try:
        user = await db.get_user(callback.from_user.id)
        cart = user.get('cart', [])
        
        if not cart:
            await callback.message.edit_text(
                "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                reply_markup=main_menu()
            )
        else:
            total = sum(item['price'] * item['quantity'] for item in cart)
            await callback.message.edit_text(
                f"üíµ –ò—Ç–æ–≥–æ: {format_price(total)} Tg",
                reply_markup=cart_actions_kb()
            )
        await callback.answer("–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
    except Exception as e:
        print(f"[ERROR] Error in cancel_clear_cart: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
    sleep_data = await db.get_sleep_mode()
    if sleep_data["enabled"]:
        end_time = sleep_data.get("end_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        await callback.message.answer(
            f"üò¥ –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
            f"–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ {end_time}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –ø—Ä–∏–¥–µ—Ç."
        )
        await callback.answer()
        return
    
    user = await db.get_user(callback.from_user.id)
    if not user or not user.get('cart'):
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        await callback.answer()
        return
    
    # Calculate total and prepare order items
    cart = user['cart']
    total = 0
    order_items = []
    
    for item in cart:
        subtotal = item['price'] * item['quantity']
        total += subtotal
        order_item = {
            'product_id': item['product_id'],
            'name': item['name'],
            'price': item['price'],
            'quantity': item['quantity']
        }
        if 'flavor' in item:
            order_item['flavor'] = item['flavor']
        order_items.append(order_item)
    
    # Save order details in state
    await state.update_data(
        order_items=order_items,
        total_amount=total
    )
    
    # Ask for phone number
    await callback.message.answer(
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX"
    )
    await state.set_state(OrderStates.waiting_phone)
    await callback.answer()

@router.message(OrderStates.waiting_phone)
async def process_phone(message: Message, state: FSMContext):
    # Validate phone number format
    phone = message.text.strip()
    if not phone.startswith('+') or not phone[1:].isdigit() or len(phone) < 10:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX")
        return
    
    # Save phone and ask for address
    await state.update_data(phone=phone)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏."
    )
    await state.set_state(OrderStates.waiting_address)

@router.message(OrderStates.waiting_address)
async def process_address(message: Message, state: FSMContext):
    # Get all order data
    data = await state.get_data()
    user = await db.get_user(message.from_user.id)
    
    # Save address and ask for payment
    await state.update_data(address=message.text)
    
    cart = user['cart']
    total = sum(item['price'] * item['quantity'] for item in cart)
    
    # Get admin card from config
    admin_card = ADMIN_CARD
    
    payment_text = (
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {format_price(total)} Tg –Ω–∞ –∫–∞—Ä—Ç—É:\n\n"
        f"<span class=\"tg-spoiler\"><code>{admin_card}</code></span>\n\n"
        "üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞."
    )
    
    await message.answer(payment_text, parse_mode="HTML")
    await state.set_state(OrderStates.waiting_payment)

@router.message(OrderStates.waiting_payment, F.photo)
async def process_payment(message: Message, state: FSMContext):
    try:
        # Get all order data
        data = await state.get_data()
        user = await db.get_user(message.from_user.id)
        cart = user['cart']
        total = sum(item['price'] * item['quantity'] for item in cart)
        
        # Create order data
        order_data = {
            'user_id': message.from_user.id,
            'username': message.from_user.username,
            'phone': data['phone'],
            'address': data['address'],
            'items': cart,
            'total_amount': total,
            'status': 'pending',
            'created_at': datetime.now(),
            'payment_photo': message.photo[-1].file_id
        }
        
        # Create order in database
        order_result = await db.create_order(order_data)
        order_id = str(order_result.inserted_id)
        
        # Clear user's cart
        await db.update_user(message.from_user.id, {'cart': []})
        
        # Send confirmation to user
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n"
            "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.",
            reply_markup=main_menu()
        )
        
        # Prepare admin notification
        admin_text = (
            f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n\n"
            f"üë§ –û—Ç: {message.from_user.full_name} (@{message.from_user.username})\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n\n"
            f"üõç –¢–æ–≤–∞—Ä—ã:\n"
        )
        
        for item in cart:
            subtotal = item['price'] * item['quantity']
            admin_text += f"- {item['name']}"
            if 'flavor' in item:
                admin_text += f" (üåà {item['flavor']})"
            admin_text += f" x{item['quantity']} = {format_price(subtotal)} Tg\n"
        
        admin_text += f"\nüí∞ –ò—Ç–æ–≥–æ: {format_price(total)} Tg"
        
        # Send notification and payment photo to admin
        try:
            # First send the order details
            await message.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_text,
                parse_mode="HTML"
            )
            
            # Then send the payment screenshot
            await message.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=message.photo[-1].file_id,
                caption=f"üí≥ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}",
                reply_markup=order_management_kb(order_id)
            )
            
            print(f"[DEBUG] Successfully notified admin about order {order_id}")
        except Exception as e:
            print(f"[ERROR] Failed to notify admin about order {order_id}: {str(e)}")
        
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Error in process_payment: {str(e)}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu()
        )
        await state.clear()

@router.message(OrderStates.waiting_payment)
async def wrong_payment_proof(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."
    )

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help_menu(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:",
        reply_markup=help_menu()
    )

@router.callback_query(F.data == "help_contacts")
async def show_contacts(callback: CallbackQuery):
    text = """üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:

Telegram: @Dimka_44"""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

@router.callback_query(F.data == "help_how_to_order")
async def show_how_to_order(callback: CallbackQuery):
    text = """‚ùì –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:

1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É
3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
5Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
6Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑

–ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

@router.callback_query(F.data == "help_payment")
async def show_payment_info(callback: CallbackQuery):
    text = """üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:

–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞"""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

@router.callback_query(F.data == "help_delivery")
async def show_delivery_info(callback: CallbackQuery):
    text = """üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:

üì¶ –°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏:
- –î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º –ø–æ –≥–æ—Ä–æ–¥—É

‚è± –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:
- –ü–æ –≥–æ—Ä–æ–¥—É: –í —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:
- –ü–æ –≥–æ—Ä–æ–¥—É: –Ø–Ω–¥–µ–∫—Å.–ö—É—Ä—å–µ—Ä–æ–º(–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ)"""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

# Add handler for order status updates (notifications to users)
@router.callback_query(F.data.startswith("order_status_"))
async def handle_order_status_update(callback: CallbackQuery):
    try:
        _, order_id, new_status = callback.data.split("_")
        order = await db.get_order(order_id)
        
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Update order status
        await db.update_order_status(order_id, new_status)
        
        # Notify user about status change
        status_messages = {
            "paid": (
                "üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                "–í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. "
                "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            ),
            "confirmed": (
                "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤!\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, "
                "–∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É."
            ),
            "cancelled": (
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
            ),
            "completed": (
                "üéâ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É!\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ!"
            )
        }
        
        if new_status in status_messages:
            try:
                # Send status update to user
                await callback.bot.send_message(
                    chat_id=order['user_id'],
                    text=f"üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id}:\n\n{status_messages[new_status]}"
                )
                
                # If order is confirmed, send additional delivery info
                if new_status == "confirmed":
                    delivery_info = (
                        "üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:\n\n"
                        "‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤\n"
                        "‚Ä¢ –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç–∞–≤–∫–æ–π\n"
                        "‚Ä¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–∏–π –ª–∏—á–Ω–æ—Å—Ç—å\n\n"
                        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                    await callback.bot.send_message(
                        chat_id=order['user_id'],
                        text=delivery_info
                    )
            except Exception as e:
                print(f"[ERROR] Failed to notify user about order status: {str(e)}")
        
        # Update admin's message
        status_text = ORDER_STATUSES.get(new_status, "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        await callback.message.edit_text(
            f"{callback.message.text.split('–°—Ç–∞—Ç—É—Å:')[0]}\n–°—Ç–∞—Ç—É—Å: {status_text}",
            reply_markup=order_management_kb(order_id)
        )
        await callback.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {status_text}")
        
    except Exception as e:
        print(f"[ERROR] Error in handle_order_status_update: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

@router.callback_query(F.data.startswith("admin_confirm_"))
async def admin_confirm_order(callback: CallbackQuery):
    try:
        order_id = callback.data.replace("admin_confirm_", "")
        order = await db.get_order(order_id)
        
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Update order status
        await db.update_order_status(order_id, "confirmed")
        
        # Notify user about confirmation
        user_notification = (
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
            "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –Ø–Ω–¥–µ–∫—Å.–î–æ—Å—Ç–∞–≤–∫–æ–π –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.(–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –º–µ—Å—Ç–µ)\n"
            "üì± –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç–∞–≤–∫–æ–π.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! üôè"
        )
        
        try:
            await callback.bot.send_message(
                chat_id=order['user_id'],
                text=user_notification
            )
        except Exception as e:
            print(f"[ERROR] Failed to notify user about order confirmation: {str(e)}")
        
        # Delete the original message
        await callback.message.delete()
        
        # Send confirmation to admin
        await callback.message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É"
        )
        
        await callback.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É")
        
    except Exception as e:
        print(f"[ERROR] Error in admin_confirm_order: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@router.callback_query(F.data.startswith("admin_cancel_"))
async def admin_start_cancel_order(callback: CallbackQuery, state: FSMContext):
    try:
        order_id = callback.data.replace("admin_cancel_", "")
        
        # Store message_id and order_id in state
        await state.update_data(
            order_id=order_id,
            message_id=callback.message.message_id,
            chat_id=callback.message.chat.id
        )
        
        await callback.message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:\n"
            "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É."
        )
        await state.set_state(CancellationStates.waiting_for_reason)
        await callback.answer()
        
    except Exception as e:
        print(f"[ERROR] Error in admin_start_cancel_order: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞")

@router.message(CancellationStates.waiting_for_reason)
async def admin_finish_cancel_order(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        order_id = data.get('order_id')
        original_message_id = data.get('message_id')
        chat_id = data.get('chat_id')
        
        if not order_id:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–∫–∞–∑–∞")
            await state.clear()
            return
            
        order = await db.get_order(order_id)
        if not order:
            await message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # Update order status and save cancellation reason
        await db.update_order(order_id, {
            'status': 'cancelled',
            'cancellation_reason': message.text
        })
        
        # Notify user about cancellation
        user_notification = (
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {message.text}\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏."
        )
        
        try:
            await message.bot.send_message(
                chat_id=order['user_id'],
                text=user_notification
            )
        except Exception as e:
            print(f"[ERROR] Failed to notify user about order cancellation: {str(e)}")
        
        # Delete the original order message
        try:
            await message.bot.delete_message(chat_id, original_message_id)
        except Exception as e:
            print(f"[ERROR] Failed to delete original message: {str(e)}")
        
        # Confirm to admin
        await message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω. –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–º–µ–Ω—ã.")
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Error in admin_finish_cancel_order: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞")
        await state.clear()

@router.callback_query(F.data.startswith("show_cart"))
async def show_cart(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        cart = await db.get_cart(user_id)
        
        if not cart or not cart.get('items', []):
            await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            await callback.answer()
            return
        
        total = 0
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        
        for item in cart['items']:
            price = item['price']
            quantity = item['quantity']
            subtotal = price * quantity
            total += subtotal
            
            text += f"üì¶ {item['name']}"
            if item.get('flavor'):
                text += f" (üåà {item['flavor']})"
            text += f"\nüí∞ {format_price(price)} x {quantity} = {format_price(subtotal)} Tg\n"
            text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        
        text += f"\nüíµ –ò—Ç–æ–≥–æ: {format_price(total)} Tg"
        
        keyboard = cart_actions_kb()
        await callback.message.answer(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        print(f"[ERROR] Error in show_cart: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã")
        await callback.answer()

@router.callback_query(F.data == "show_help")
async def show_help_from_button(callback: CallbackQuery):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:",
        reply_markup=help_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "create_order")
async def start_order(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
    sleep_data = await db.get_sleep_mode()
    if sleep_data["enabled"]:
        end_time = sleep_data.get("end_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        await callback.message.answer(
            f"üò¥ –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
            f"–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ {end_time}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –ø—Ä–∏–¥–µ—Ç."
        )
        await callback.answer()
        return
        
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ ...
