from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
import logging

from database.mongodb import db
from keyboards.user_kb import (
    main_menu,
    catalog_menu,
    product_actions_kb,
    cart_actions_kb,
    cart_item_kb,
    confirm_order_kb,
    help_menu,
    confirm_clear_cart_kb
)
from keyboards.admin_kb import order_management_kb
from config import ADMIN_ID, ADMIN_CARD
from handlers.admin_handlers import format_order_notification

# Configure logging
logger = logging.getLogger(__name__)

router = Router()

class OrderStates(StatesGroup):
    waiting_phone = State()
    waiting_address = State()
    waiting_payment = State()
    selecting_flavor = State()

class CancellationStates(StatesGroup):
    waiting_for_reason = State()

# Helper function to format price with decimal points
def format_price(price):
    return f"{float(price):.2f}"

@router.message(Command("start"))
async def cmd_start(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
        sleep_data = await db.get_sleep_mode()
        if sleep_data is None:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ —Å–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n\n"
                "–ù–∞—à –º–∞–≥–∞–∑–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ 01:00\n\n"
                "üëá–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ÑπÔ∏è –ü–æ–º–æ—â—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µüëá",
                reply_markup=main_menu()
            )
            return
            
        if sleep_data["enabled"]:
            end_time = sleep_data.get("end_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            # Create help button
            help_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")]
            ])
            await message.answer(
                f"üò¥ –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
                f"–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ {end_time}.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –ø—Ä–∏–¥–µ—Ç.",
                reply_markup=help_button
            )
            return
            
        await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n\n"
                "–ù–∞—à –º–∞–≥–∞–∑–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ 01:00\n\n"
                "üëá–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ÑπÔ∏è –ü–æ–º–æ—â—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µüëá",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"Error in cmd_start: {str(e)}")
        await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n\n"
                "–ù–∞—à –º–∞–≥–∞–∑–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ 01:00\n\n"
                "üëá–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ÑπÔ∏è –ü–æ–º–æ—â—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µüëá",
            reply_markup=main_menu()
        )

@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
        sleep_data = await db.get_sleep_mode()
        if sleep_data is None:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ —Å–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=catalog_menu()
            )
            return
            
        if sleep_data["enabled"]:
            end_time = sleep_data.get("end_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            help_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")]
            ])
            await message.answer(
                f"üò¥ –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
                f"–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ {end_time}.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –ø—Ä–∏–¥–µ—Ç.",
                reply_markup=help_button
            )
            return

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=catalog_menu()
        )
    except Exception as e:
        logger.error(f"Error in show_catalog: {str(e)}")
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=catalog_menu()
        )

@router.callback_query(F.data.startswith("category_"))
async def show_category(callback: CallbackQuery, state: FSMContext):
    try:
        category = callback.data.replace("category_", "")
        products = await db.get_products_by_category(category)
        
        if not products:
            await callback.message.answer("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
            return
        
        for product in products:
            try:
                caption = f"üì¶ {product['name']}\n"
                caption += f"üí∞ {format_price(product['price'])} Tg\n"
                caption += f"üìù {product['description']}\n\n"
                
                # Add flavors to caption if they exist
                flavors = product.get('flavors', [])
                if flavors:
                    caption += "üåà –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã:\n"
                    for flavor in flavors:
                        flavor_name = flavor.get('name', '') if isinstance(flavor, dict) else flavor
                        flavor_quantity = flavor.get('quantity', 0) if isinstance(flavor, dict) else 0
                        if flavor_quantity > 0:
                            caption += f"‚Ä¢ {flavor_name} ({flavor_quantity} —à—Ç.)\n"
                
                product_id = str(product['_id'])
                print(f"[DEBUG] Showing product with ID: {product_id}")
                
                # Get flavors for the product
                flavors = product.get('flavors', [])
                if isinstance(flavors, list):
                    # If flavors is a list of strings, convert to list of dicts
                    if flavors and isinstance(flavors[0], str):
                        flavors = [{'name': flavor, 'quantity': 0} for flavor in flavors]
                
                keyboard = product_actions_kb(product_id, False, flavors)
                
                try:
                    await callback.message.answer_photo(
                        photo=product['photo'],
                        caption=caption,
                        reply_markup=keyboard
                    )
                except Exception as e:
                    print(f"[ERROR] Error showing product {product_id}: {str(e)}")
                    await callback.message.answer(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product['name']}"
                    )
            except Exception as e:
                print(f"[ERROR] Error processing product: {str(e)}")
                continue
        
        await callback.answer()
    except Exception as e:
        print(f"[ERROR] Error in show_category: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

@router.message(OrderStates.selecting_flavor)
async def handle_flavor_number(message: Message, state: FSMContext):
    try:
        # Get the number from message
        if not message.text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –≤–∫—É—Å–∞")
            return
            
        number = int(message.text)
        
        # Get product data from state
        data = await state.get_data()
        product_id = data.get('current_product_id')
        flavors = data.get('current_product_flavors', [])
        
        if not product_id or not flavors:
            await message.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
            
        # Check if number is valid
        if number < 1 or number > len(flavors):
            await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(flavors)}")
            return
            
        # Get the selected flavor
        selected_flavor = flavors[number - 1]
        
        # Get product
        product = await db.get_product(product_id)
        if not product:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # Get or create user
        user = await db.get_user(message.from_user.id)
        if not user:
            user_data = {
                "user_id": message.from_user.id,
                "username": message.from_user.username,
                "first_name": message.from_user.first_name,
                "last_name": message.from_user.last_name,
                "cart": []
            }
            user = await db.create_user(user_data)
        
        # Initialize cart if needed
        cart = user.get('cart', [])
        if cart is None:
            cart = []
        
        # Check if product with same flavor already in cart
        found = False
        for item in cart:
            if item.get('product_id') == product_id and item.get('flavor') == selected_flavor:
                item['quantity'] += 1
                found = True
                break
        
        # Add new item if not found
        if not found:
            cart.append({
                'product_id': product_id,
                'name': product['name'],
                'price': product['price'],
                'quantity': 1,
                'flavor': selected_flavor
            })
        
        # Update cart
        await db.update_user(message.from_user.id, {'cart': cart})
        await message.answer(f"–¢–æ–≤–∞—Ä ({selected_flavor}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Error in handle_flavor_number: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∫—É—Å–∞")
        await state.clear()

@router.callback_query(F.data.startswith("select_flavor_"))
async def select_flavor(callback: CallbackQuery, state: FSMContext):
    logger.info("Starting select_flavor handler")
    try:
        # Get the full callback data
        full_data = callback.data
        logger.debug(f"Full callback data: {full_data}")
        
        # Extract product_id and flavor correctly
        data_without_prefix = full_data.replace("select_flavor_", "")
        underscore_index = data_without_prefix.find("_")
        if underscore_index == -1:
            logger.error("Invalid callback data format")
            await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        product_id = data_without_prefix[:underscore_index]
        flavor_name = data_without_prefix[underscore_index + 1:]
        
        logger.debug(f"Parsed product_id: {product_id}, flavor: {flavor_name}")
        
        # Get product first to validate it exists
        product = await db.get_product(product_id)
        if not product:
            logger.warning(f"Product not found in database: {product_id}")
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
            
        # Check if flavor exists and has enough quantity
        flavors = product.get('flavors', [])
        flavor = next((f for f in flavors if f.get('name') == flavor_name), None)
        
        if not flavor:
            await callback.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∫—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
            
        if flavor.get('quantity', 0) <= 0:
            await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –≤–∫—É—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
            return
            
        # Get or create user
        user = await db.get_user(callback.from_user.id)
        if not user:
            user_data = {
                "user_id": callback.from_user.id,
                "username": callback.from_user.username,
                "first_name": callback.from_user.first_name,
                "last_name": callback.from_user.last_name,
                "cart": []
            }
            user = await db.create_user(user_data)
            logger.info(f"Created new user: {callback.from_user.id}")
        
        # Initialize cart if needed
        cart = user.get('cart', [])
        if cart is None:
            cart = []
        
        # Check if product with same flavor already in cart
        found = False
        for item in cart:
            if str(item.get('product_id')) == str(product_id) and item.get('flavor') == flavor_name:
                # Check if we can add more
                if item['quantity'] >= flavor.get('quantity', 0):
                    await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏", show_alert=True)
                    return
                item['quantity'] += 1
                found = True
                break
        
        # Add new item if not found
        if not found:
            new_item = {
                'product_id': str(product_id),
                'name': product['name'],
                'price': int(product['price']),
                'quantity': 1,
                'flavor': flavor_name
            }
            cart.append(new_item)
        
        # Update user's cart in database
        result = await db.update_user(callback.from_user.id, {'cart': cart})
        
        if result:
            await callback.answer(f"–¢–æ–≤–∞—Ä ({flavor_name}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=True)
            await show_cart_message(callback.message, user)
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)
        
    except Exception as e:
        logger.error(f"Error in select_flavor: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    print("[DEBUG] Starting add_to_cart handler")
    try:
        product_id = callback.data.replace("add_to_cart_", "")
        print(f"[DEBUG] Attempting to add product with ID: {product_id}")
        
        # Get product first to validate it exists
        product = await db.get_product(product_id)
        print(f"[DEBUG] Retrieved product from DB: {product}")
        
        if not product:
            print(f"[DEBUG] Product not found in database: {product_id}")
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
            
        # If product has flavors, show flavor selection keyboard
        if 'flavors' in product and product['flavors']:
            keyboard = []
            for flavor in product['flavors']:
                flavor_name = flavor.get('name', '')
                flavor_quantity = flavor.get('quantity', 0)
                if flavor_quantity > 0:  # Only show flavors that are in stock
                    keyboard.append([
                        InlineKeyboardButton(
                            text=f"üåà {flavor_name} ({flavor_quantity} —à—Ç.)",
                            callback_data=f"select_flavor_{product_id}_{flavor_name}"
                        )
                    ])
            keyboard.append([
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_catalog")
            ])
            
            if not keyboard:  # If no flavors are in stock
                await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –≤–∫—É—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å", show_alert=True)
                return
            
            await callback.message.edit_caption(
                caption=f"üì¶ {product['name']}\n"
                f"üí∞ {format_price(product['price'])} Tg\n"
                f"üìù {product['description']}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
            )
            await callback.answer()
            return
            
        # Get or create user
        user = await db.get_user(callback.from_user.id)
        if not user:
            user_data = {
                "user_id": callback.from_user.id,
                "username": callback.from_user.username,
                "first_name": callback.from_user.first_name,
                "last_name": callback.from_user.last_name,
                "cart": []
            }
            user = await db.create_user(user_data)
            print(f"[DEBUG] Created new user: {user}")
        
        # Initialize cart if needed
        cart = user.get('cart', [])
        if cart is None:
            cart = []
        
        print(f"[DEBUG] Current cart before update: {cart}")
        
        # Check if product already in cart
        found = False
        for item in cart:
            if str(item.get('product_id')) == str(product_id):
                item['quantity'] += 1
                found = True
                print(f"[DEBUG] Increased quantity for existing item: {item}")
                break
        
        # Add new item if not found
        if not found:
            new_item = {
                'product_id': str(product_id),
                'name': product['name'],
                'price': int(product['price']),
                'quantity': 1
            }
            cart.append(new_item)
            print(f"[DEBUG] Added new item to cart: {new_item}")
        
        print(f"[DEBUG] Cart after update: {cart}")
        
        # Update user's cart in database
        result = await db.update_user(callback.from_user.id, {'cart': cart})
        print(f"[DEBUG] Database update result: {result}")
        
        if result:
            await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!", show_alert=True)
            # Show updated cart
            await show_cart_message(callback.message, user)
        else:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)
        
    except Exception as e:
        print(f"[ERROR] Error in add_to_cart: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)

async def show_cart_message(message, user):
    """Helper function to show cart contents"""
    if not user or not user.get('cart'):
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    cart = user['cart']
    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    
    for item in cart:
        subtotal = item['price'] * item['quantity']
        text += f"üì¶ {item['name']}"
        if 'flavor' in item:
            text += f" (üåà {item['flavor']})"
        text += f"\nüí∞ {format_price(item['price'])} Tg x {item['quantity']} = {format_price(subtotal)} Tg\n"
        text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        total += subtotal
    
    text += f"\nüíé –ò—Ç–æ–≥–æ: {format_price(total)} Tg"
    
    # Create keyboard with +/- buttons for each item
    keyboard = []
    for item in cart:
        item_id = item['product_id']
        keyboard.append([
            InlineKeyboardButton(text=f"‚ûñ {item['name']}", callback_data=f"decrease_{item_id}"),
            InlineKeyboardButton(text=f"‚ûï {item['name']}", callback_data=f"increase_{item_id}")
        ])
    
    # Add action buttons at the bottom
    keyboard.append([
        InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart"),
        InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
    ])
    
    await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
        sleep_data = await db.get_sleep_mode()
        if sleep_data is None:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ —Å–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            user = await db.get_user(message.from_user.id)
            await show_cart_message(message, user)
            return
            
        if sleep_data["enabled"]:
            end_time = sleep_data.get("end_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            help_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")]
            ])
            await message.answer(
                f"üò¥ –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
                f"–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ {end_time}.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –ø—Ä–∏–¥–µ—Ç.",
                reply_markup=help_button
            )
            return

        user = await db.get_user(message.from_user.id)
        await show_cart_message(message, user)
    except Exception as e:
        logger.error(f"Error in show_cart: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã")

@router.callback_query(F.data.startswith("increase_"))
async def increase_cart_item(callback: CallbackQuery):
    try:
        product_id = callback.data.replace("increase_", "")
        user = await db.get_user(callback.from_user.id)
        
        if not user or not user.get('cart'):
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
            
        cart = user['cart']
        item = next((item for item in cart if str(item['product_id']) == str(product_id)), None)
        
        if not item:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            return
            
        # Check if product still exists and has enough quantity
        product = await db.get_product(product_id)
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        if 'flavor' in item:
            flavors = product.get('flavors', [])
            flavor = next((f for f in flavors if f.get('name') == item['flavor']), None)
            if not flavor or flavor.get('quantity', 0) <= item['quantity']:
                await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")
                return
        
        # Increase quantity
        item['quantity'] += 1
        await db.update_user(callback.from_user.id, {'cart': cart})
        
        # Show updated cart
        await show_cart_message(callback.message, user)
        await callback.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ")
        
    except Exception as e:
        print(f"[ERROR] Error in increase_cart_item: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("decrease_"))
async def decrease_cart_item(callback: CallbackQuery):
    try:
        product_id = callback.data.replace("decrease_", "")
        user = await db.get_user(callback.from_user.id)
        
        if not user or not user.get('cart'):
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
            
        cart = user['cart']
        item = next((item for item in cart if str(item['product_id']) == str(product_id)), None)
        
        if not item:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            return
            
        if item['quantity'] > 1:
            # Decrease quantity
            item['quantity'] -= 1
            await db.update_user(callback.from_user.id, {'cart': cart})
            
            # Show updated cart
            await show_cart_message(callback.message, user)
            await callback.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")
        else:
            # Remove item if quantity is 1
            cart = [i for i in cart if str(i['product_id']) != str(product_id)]
            await db.update_user(callback.from_user.id, {'cart': cart})
            
            if not cart:
                await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            else:
                await show_cart_message(callback.message, user)
            await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        
    except Exception as e:
        print(f"[ERROR] Error in decrease_cart_item: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("remove_"))
async def remove_item(callback: CallbackQuery):
    try:
        product_id = callback.data.replace("remove_", "")
        print(f"[DEBUG] Removing product from cart: {product_id}")
        
        user = await db.get_user(callback.from_user.id)
        if not user or not user.get('cart'):
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
            
        cart = user['cart']
        # Remove item with matching product_id
        cart = [item for item in cart if item['product_id'] != product_id]
        await db.update_user(callback.from_user.id, {'cart': cart})
        
        await callback.message.delete()
        await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        
        if not cart:
            await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=main_menu())
            
    except Exception as e:
        print(f"[ERROR] Error in remove_item: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "back_to_catalog")
async def back_to_catalog_handler(callback: CallbackQuery):
    try:
        # Delete the previous message with cart
        await callback.message.delete()
        
        # Show catalog menu
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=catalog_menu()
        )
        await callback.answer()
    except Exception as e:
        print(f"[ERROR] Error in back_to_catalog: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–∞–ª–æ–≥—É")

@router.callback_query(F.data == "confirm_clear_cart")
async def confirm_clear_cart(callback: CallbackQuery):
    try:
        await callback.message.edit_text(
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?",
            reply_markup=confirm_clear_cart_kb()
        )
        await callback.answer()
    except Exception as e:
        print(f"[ERROR] Error in confirm_clear_cart: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    try:
        # Clear user's cart in database
        await db.update_user(callback.from_user.id, {'cart': []})
        
        # Delete all previous cart item messages
        message_id = callback.message.message_id
        chat_id = callback.message.chat.id
        
        # Try to delete recent messages that might be cart items
        for i in range(message_id - 10, message_id + 1):
            try:
                await callback.bot.delete_message(chat_id, i)
            except:
                continue
        
        # Show empty cart message
        await callback.message.answer(
            "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏.",
            reply_markup=main_menu()
        )
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
        
    except Exception as e:
        print(f"[ERROR] Error in clear_cart: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")

@router.callback_query(F.data == "cancel_clear_cart")
async def cancel_clear_cart(callback: CallbackQuery):
    try:
        user = await db.get_user(callback.from_user.id)
        cart = user.get('cart', [])
        
        if not cart:
            await callback.message.edit_text(
                "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                reply_markup=main_menu()
            )
        else:
            total = sum(item['price'] * item['quantity'] for item in cart)
            await callback.message.edit_text(
                f"üíµ –ò—Ç–æ–≥–æ: {format_price(total)} Tg",
                reply_markup=cart_actions_kb()
            )
        await callback.answer("–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
    except Exception as e:
        print(f"[ERROR] Error in cancel_clear_cart: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
    sleep_data = await db.get_sleep_mode()
    if sleep_data["enabled"]:
        end_time = sleep_data.get("end_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        await callback.message.answer(
            f"üò¥ –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
            f"–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ {end_time}.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –ø—Ä–∏–¥–µ—Ç."
        )
        await callback.answer()
        return
    
    user = await db.get_user(callback.from_user.id)
    if not user or not user.get('cart'):
        await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        await callback.answer()
        return
    
    # Calculate total and prepare order items
    cart = user['cart']
    total = 0
    order_items = []
    
    # Check if all items are still available
    for item in cart:
        product = await db.get_product(item['product_id'])
        if not product:
            await callback.message.answer(f"–¢–æ–≤–∞—Ä {item['name']} –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            await callback.answer()
            return
            
        if 'flavor' in item:
            flavors = product.get('flavors', [])
            flavor = next((f for f in flavors if f.get('name') == item['flavor']), None)
            if not flavor or flavor.get('quantity', 0) < item['quantity']:
                await callback.message.answer(
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∫—É—Å {item['flavor']} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {item['name']} "
                    f"–±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –Ω—É–∂–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ"
                )
                await callback.answer()
                return
    
    # If all items are available, proceed with checkout
    for item in cart:
        subtotal = item['price'] * item['quantity']
        total += subtotal
        order_item = {
            'product_id': item['product_id'],
            'name': item['name'],
            'price': item['price'],
            'quantity': item['quantity']
        }
        if 'flavor' in item:
            order_item['flavor'] = item['flavor']
        order_items.append(order_item)
    
    # Save order details in state
    await state.update_data(
        order_items=order_items,
        total_amount=total
    )
    
    # Ask for phone number
    await callback.message.answer(
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8XXXXXXXXXX"
    )
    await state.set_state(OrderStates.waiting_phone)
    await callback.answer()

@router.message(OrderStates.waiting_phone)
async def process_phone(message: Message, state: FSMContext):
    # Validate phone number format
    phone = message.text.strip()
    if not  phone.startswith('8') or not phone[1:].isdigit() or len(phone) != 11:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8XXXXXXXXXX")
        return
    
    # Save phone and ask for address
    await state.update_data(phone=phone)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É –∏ –¥–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞ 123)"
    )
    await state.set_state(OrderStates.waiting_address)

@router.message(OrderStates.waiting_address)
async def process_address(message: Message, state: FSMContext):
    # Get all order data
    data = await state.get_data()
    user = await db.get_user(message.from_user.id)
    
    # Create 2GIS link from address
    address = message.text.strip()
    address_for_link = address.replace(' ', '%20')  # Replace spaces with %20 for URL
    gis_link = f"https://2gis.kz/pavlodarr/search/{address_for_link}"
    
    # Save both original address and 2GIS link
    await state.update_data(
        address=address,
        gis_link=gis_link
    )
    
    cart = user['cart']
    total = sum(item['price'] * item['quantity'] for item in cart)
    
    # Get admin card from config
    admin_card = ADMIN_CARD
    
    payment_text = (
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {format_price(total)} Tg –Ω–∞ –∫–∞—Ä—Ç—É:\n\n"
        f"<span class=\"tg-spoiler\"><code>{admin_card}</code></span>\n\n"
        "KaspiBank(–î–∞—Ä—å—è.–ö)\n\n"
        "üëÜ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞."
    )
    
    await message.answer(payment_text, parse_mode="HTML")
    await state.set_state(OrderStates.waiting_payment)

@router.message(OrderStates.waiting_payment)
async def handle_payment_proof(message: Message, state: FSMContext):
    print(f"[DEBUG] Received payment proof. Content type: {message.content_type}")
    
    try:
        if message.photo:
            print("[DEBUG] Processing photo")
            file_id = message.photo[-1].file_id
            file_type = 'photo'
        elif message.document:
            print(f"[DEBUG] Processing document - MIME: {message.document.mime_type}, Name: {message.document.file_name}")
            file_id = message.document.file_id
            file_type = 'document'
        else:
            print("[DEBUG] Invalid payment proof type")
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª–∞."
            )
            return

        # Get all order data
        data = await state.get_data()
        print(f"[DEBUG] State data: {data}")
        
        if not data:
            print("[ERROR] No state data found")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu()
            )
            await state.clear()
            return

        user = await db.get_user(message.from_user.id)
        print(f"[DEBUG] User data: {user}")
        
        if not user or not user.get('cart'):
            print("[ERROR] No user or cart data found")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu()
            )
            await state.clear()
            return

        cart = user['cart']
        total = sum(item['price'] * item['quantity'] for item in cart)
        
        # Create order data
        order_data = {
            'user_id': message.from_user.id,
            'username': message.from_user.username,
            'phone': data['phone'],
            'address': data['address'],
            'gis_link': data['gis_link'],
            'items': cart,
            'total_amount': total,
            'status': 'pending',
            'created_at': datetime.now(),
            'payment_file_id': file_id,
            'payment_file_type': file_type
        }
        
        print(f"[DEBUG] Order data prepared: {order_data}")
        
        # Create order in database
        order_result = await db.create_order(order_data)
        order_id = str(order_result.inserted_id)
        print(f"[DEBUG] Order created with ID: {order_id}")
        
        # Update product quantities
        for item in cart:
            product = await db.get_product(item['product_id'])
            if product and 'flavor' in item:
                flavors = product.get('flavors', [])
                flavor = next((f for f in flavors if f.get('name') == item['flavor']), None)
                if flavor:
                    flavor['quantity'] -= item['quantity']
                    await db.update_product(item['product_id'], {'flavors': flavors})
        
        # Clear user's cart
        await db.update_user(message.from_user.id, {'cart': []})
        
        # Send confirmation to user
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n"
            "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.",
            reply_markup=main_menu()
        )
        
        # Prepare user data for notification
        user_data = {
            'full_name': message.from_user.full_name,
            'username': message.from_user.username
        }
        
        # Format and send admin notification
        admin_text = await format_order_notification(
            order_id=order_id,
            user_data=user_data,
            order_data=data,
            cart=cart,
            total=total
        )
        
        try:
            # First send the order details
            await message.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_text
            )
            
            # Then send the payment proof (photo or document)
            if file_type == 'photo':
                await message.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=file_id,
                    caption=f"üí≥ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}",
                    reply_markup=order_management_kb(order_id)
                )
            else:  # Any document
                await message.bot.send_document(
                    chat_id=ADMIN_ID,
                    document=file_id,
                    caption=f"üí≥ –ß–µ–∫ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}",
                    reply_markup=order_management_kb(order_id)
                )
            
            print(f"[DEBUG] Successfully notified admin about order {order_id}")
        except Exception as e:
            print(f"[ERROR] Failed to notify admin about order {order_id}: {str(e)}")
        
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Error in handle_payment_proof: {str(e)}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu()
        )
        await state.clear()

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help_menu(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:",
        reply_markup=help_menu()
    )

@router.callback_query(F.data == "help_contacts")
async def show_contacts(callback: CallbackQuery):
    text = """üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:

Telegram: @Dimka_44"""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

@router.callback_query(F.data == "help_how_to_order")
async def show_how_to_order(callback: CallbackQuery):
    text = """‚ùì –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:

1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É
3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
5Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
6Ô∏è‚É£ –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É

–ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

@router.callback_query(F.data == "help_payment")
async def show_payment_info(callback: CallbackQuery):
    text = """üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:

-–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞(–ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É)"""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

@router.callback_query(F.data == "help_delivery")
async def show_delivery_info(callback: CallbackQuery):
    text = """üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:

üì¶ –û –¥–æ—Å—Ç–∞–≤–∫–∏:
- –î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º –ø–æ –≥–æ—Ä–æ–¥—É(–¢–æ–ª—å–∫–æ –≤ —á–µ—Ä—Ç–µ –≥–æ—Ä–æ–¥–∞ –ü–∞–≤–ª–æ–¥–∞—Ä)

‚è± –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:
-–í —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:
-–Ø–Ω–¥–µ–∫—Å.–ö—É—Ä—å–µ—Ä–æ–º(–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ)"""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

@router.callback_query(F.data.startswith("admin_confirm_"))
async def admin_confirm_order(callback: CallbackQuery):
    try:
        order_id = callback.data.replace("admin_confirm_", "")
        order = await db.get_order(order_id)
        
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Update order status
        await db.update_order_status(order_id, "confirmed")
        
        # Notify user about confirmation
        user_notification = (
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
            "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –Ø–Ω–¥–µ–∫—Å.–î–æ—Å—Ç–∞–≤–∫–æ–π –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.(–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ –º–µ—Å—Ç–µ)\n"
            "üì± –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç–∞–≤–∫–æ–π.\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! üôè"
        )
        
        try:
            await callback.bot.send_message(
                chat_id=order['user_id'],
                text=user_notification
            )
        except Exception as e:
            print(f"[ERROR] Failed to notify user about order confirmation: {str(e)}")
        
        # Delete the original message
        await callback.message.delete()
        
        # Send confirmation to admin
        await callback.message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É"
        )
        
        await callback.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É")
        
    except Exception as e:
        print(f"[ERROR] Error in admin_confirm_order: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

@router.callback_query(F.data.startswith("admin_cancel_"))
async def admin_start_cancel_order(callback: CallbackQuery, state: FSMContext):
    try:
        order_id = callback.data.replace("admin_cancel_", "")
        
        # Store message_id and order_id in state
        await state.update_data(
            order_id=order_id,
            message_id=callback.message.message_id,
            chat_id=callback.message.chat.id
        )
        
        await callback.message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:\n"
            "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É."
        )
        await state.set_state(CancellationStates.waiting_for_reason)
        await callback.answer()
        
    except Exception as e:
        print(f"[ERROR] Error in admin_start_cancel_order: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞")

@router.message(CancellationStates.waiting_for_reason)
async def admin_finish_cancel_order(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        order_id = data.get('order_id')
        original_message_id = data.get('message_id')
        chat_id = data.get('chat_id')
        
        if not order_id:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–∫–∞–∑–∞")
            await state.clear()
            return
            
        order = await db.get_order(order_id)
        if not order:
            await message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # Update order status and save cancellation reason
        await db.update_order(order_id, {
            'status': 'cancelled',
            'cancellation_reason': message.text
        })
        
        # Notify user about cancellation
        user_notification = (
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {message.text}\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏."
        )
        
        try:
            await message.bot.send_message(
                chat_id=order['user_id'],
                text=user_notification
            )
        except Exception as e:
            print(f"[ERROR] Failed to notify user about order cancellation: {str(e)}")
        
        # Delete the original order message
        try:
            await message.bot.delete_message(chat_id, original_message_id)
        except Exception as e:
            print(f"[ERROR] Failed to delete original message: {str(e)}")
        
        # Confirm to admin
        await message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω. –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–º–µ–Ω—ã.")
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Error in admin_finish_cancel_order: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞")
        await state.clear()

@router.callback_query(F.data.startswith("show_cart"))
async def show_cart(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        cart = await db.get_cart(user_id)
        
        if not cart or not cart.get('items', []):
            await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            await callback.answer()
            return
        
        total = 0
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        
        for item in cart['items']:
            price = item['price']
            quantity = item['quantity']
            subtotal = price * quantity
            total += subtotal
            
            text += f"üì¶ {item['name']}"
            if item.get('flavor'):
                text += f" (üåà {item['flavor']})"
            text += f"\nüí∞ {format_price(price)} x {quantity} = {format_price(subtotal)} Tg\n"
            text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        
        text += f"\nüíµ –ò—Ç–æ–≥–æ: {format_price(total)} Tg"
        
        keyboard = cart_actions_kb()
        await callback.message.answer(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        print(f"[ERROR] Error in show_cart: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã")
        await callback.answer()

@router.callback_query(F.data == "show_help")
async def show_help_from_button(callback: CallbackQuery):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:",
        reply_markup=help_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "create_order")
async def start_order(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
        sleep_data = await db.get_sleep_mode()
        if sleep_data is None:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ —Å–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ ...
            return
            
        if sleep_data["enabled"]:
            end_time = sleep_data.get("end_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            await callback.message.answer(
                f"üò¥ –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
                f"–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ {end_time}.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –ø—Ä–∏–¥–µ—Ç."
            )
            await callback.answer()
            return
            
        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ ...
    except Exception as e:
        logger.error(f"Error in start_order: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
