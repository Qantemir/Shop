from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import logging
import asyncio
from collections import defaultdict

from database import db
from keyboards.user_kb import (
    main_menu,
    catalog_menu,
    product_actions_kb,
    cart_actions_kb,
    help_menu,
    cart_full_kb,
    help_button_kb
)
from keyboards.admin_kb import order_management_kb
from config import ADMIN_ID, ADMIN_CARD,ADMIN_SWITCHING, CATEGORIES, ADMIN_CARD_NAME
from handlers.admin_handlers import format_order_notification
from utils.sleep_mode import check_sleep_mode
from utils.message_utils import safe_delete_message

user_log = logging.getLogger(__name__)#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–µ—Ä–∞

# –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
user_last_click = defaultdict(dict)  # {user_id: {callback_data: timestamp}}
RATE_LIMIT_SECONDS = 1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

async def check_rate_limit(user_id: int, callback_data: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏"""
    current_time = datetime.now()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–Ω–æ–ø–∫–∏
    user_clicks = user_last_click.get(user_id, {})
    last_click_time = user_clicks.get(callback_data)
    
    if last_click_time:
        time_diff = (current_time - last_click_time).total_seconds()
        if time_diff < RATE_LIMIT_SECONDS:
            return False  # –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
    user_last_click[user_id][callback_data] = current_time
    return True  # –ú–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å

async def cleanup_old_rate_limits():#–∞–≤–æ—Ç–æ—Ç—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–∞–µ–π –∞–Ω—Ç–∏—Å–ø–∞–º–∞
    current_time = datetime.now()
    cleanup_threshold = 3600  # 1 —á–∞—Å
    
    for user_id in list(user_last_click.keys()):
        user_clicks = user_last_click[user_id]
        for callback_data in list(user_clicks.keys()):
            last_click_time = user_clicks[callback_data]
            if (current_time - last_click_time).total_seconds() > cleanup_threshold:
                del user_clicks[callback_data]
        
        if not user_clicks:
            del user_last_click[user_id]

async def start_rate_limit_cleanup():# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    while True:
        await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
        await cleanup_old_rate_limits()

def rate_limit_protected(func):#–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
    async def wrapper(callback: CallbackQuery, *args, **kwargs):
        if not await check_rate_limit(callback.from_user.id, callback.data):
            await callback.answer("‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º", show_alert=True)
            return
        return await func(callback, *args, **kwargs)
    return wrapper

async def init_rate_limit_cleanup(bot=None):#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É rate limiting –∏ –∫–æ—Ä–∑–∏–Ω
    asyncio.create_task(start_rate_limit_cleanup())
    asyncio.create_task(start_cart_cleanup(bot))
    user_log.info("Rate limit and cart cleanup tasks started")

router = Router()

class OrderStates(StatesGroup):#—Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    waiting_phone = State()
    waiting_address = State()
    waiting_payment = State()
    selecting_flavor = State()

class CancellationStates(StatesGroup):#–¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã
    waiting_for_reason = State()

class WelcomeMessageState(StatesGroup):#–¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_id = State()

def format_price(price):#–ú–∞—Å–∫–∞ –¥–ª—è —Å—É–º–º—ã
    return f"{float(price):.2f}"

@router.message(Command("start"))#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def cmd_start(message: Message, state: FSMContext):
    try:
        if await check_sleep_mode(message):
            return
    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞: {e}")

    help_button = help_button_kb()
    welcome_msg = await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n\n"
        "üëá–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ‚ÑπÔ∏è –ü–æ–º–æ—â—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µüëá",
          reply_markup=main_menu()
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(welcome_message_id=welcome_msg.message_id)

@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")#–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–∞–ª–æ–≥
async def show_catalog(message: Message, state: FSMContext):
    try:
        await safe_delete_message(message.bot, message.chat.id, message.message_id)

        if await check_sleep_mode(message):
            return
    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –≤ show_catalog: {e}")

    try:
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
        catalog_message_id = data.get('catalog_message_id')
        if catalog_message_id:
            await safe_delete_message(message.bot, message.chat.id, catalog_message_id)
        
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        product_message_ids = data.get('product_message_ids', [])
        if product_message_ids:
            for message_id in product_message_ids:
                await safe_delete_message(message.bot, message.chat.id, message_id)
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            await state.update_data(product_message_ids=[])
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        cart_message_id = data.get('cart_message_id')
        if cart_message_id:
            await safe_delete_message(message.bot, message.chat.id, cart_message_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏
        help_message_id = data.get('help_message_id')
        if help_message_id:
            await safe_delete_message(message.bot, message.chat.id, help_message_id)
    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    catalog_msg = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=catalog_menu()
    )
    await state.update_data(catalog_message_id=catalog_msg.message_id)

@router.callback_query(F.data.startswith("category_"))#—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def show_category(callback: CallbackQuery, state: FSMContext):
    try:
        if await check_sleep_mode(callback):
            return
            
        category = callback.data.replace("category_", "")
        products = await db.get_products_by_category(category)
        
        if not products:
            await callback.answer(
                text="‚ùóÔ∏è–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
                show_alert=True 
            )
            return
        
        await delete_previous_callback_messages(callback, state, "catalog")
        
        product_message_ids = []
        
        for product in products:
            product_id = str(product['_id'])
            try:
                caption = build_product_caption(product)
                keyboard = product_actions_kb(product_id, False, product.get('flavors', []))
                
                product_msg = await callback.message.answer_photo(
                    photo=product['photo'],
                    caption=caption,
                    reply_markup=keyboard
                )
                product_message_ids.append(product_msg.message_id)
            except Exception as e:
                user_log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
                await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

        await state.update_data(product_message_ids=product_message_ids)
        await callback.answer()

    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –≤ show_category: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")

def build_product_caption(product: dict) -> str:#–≤—ã–≤–æ–¥ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
    caption = f"üì¶ {product['name']}\n"
    caption += f"üí∞ {format_price(product['price'])} ‚Ç∏\n"
    caption += f"üìù {product['description']}\n\n"

    flavors = product.get('flavors', [])
    available_flavors = []

    for flavor in flavors:
        if isinstance(flavor, dict):
            name = flavor.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            quantity = flavor.get('quantity', 0)
            if quantity > 0:
                available_flavors.append(f"‚Ä¢ {name} ({quantity} —à—Ç.)")

    if available_flavors:
        caption += "üëá–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É –Ω–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∫—É—Å –Ω–∏–∂–µüëá"
    else:
        caption += "üö´ –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"

    return caption

@router.callback_query(F.data.startswith("sf_"))#—Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–∞
@rate_limit_protected
async def select_flavor(callback: CallbackQuery, *args, **kwargs):
    try:
        # Check sleep mode
        if await check_sleep_mode(callback):
            return
        
        parts = callback.data.split("_")
        if len(parts) != 3:
            await callback.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        product_id, flavor_index = parts[1], parts[2]
        try:
            flavor_index = int(flavor_index) - 1
        except ValueError:
            await callback.answer("–û—à–∏–±–∫–∞ –≤ –∏–Ω–¥–µ–∫—Å–µ –≤–∫—É—Å–∞")
            return

        product = await db.get_product(product_id)
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        flavors = product.get("flavors", [])
        if flavor_index >= len(flavors):
            await callback.answer("–í–∫—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        flavor = flavors[flavor_index]
        if not flavor.get("quantity", 0):
            await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –≤–∫—É—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
            return

        user = await db.get_user(callback.from_user.id)
        if not user:
            user = {'user_id': callback.from_user.id, 'username': callback.from_user.username, 'cart': []}
            await db.create_user(user)

        cart = user.get("cart", [])
        if any(item['product_id'] == product_id and item['flavor'] == flavor['name'] for item in cart):
            await callback.answer("üîÑ –¢–æ–≤–∞—Ä —É–∂–µ –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ (—á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É)", show_alert=True)
            return

        # Atomic deduction
        success = await db.update_product_flavor_quantity(product_id, flavor['name'], -1)
        if not success:
            await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –≤–∫—É—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
            return

        cart.append({
            'product_id': product_id,
            'name': product['name'],
            'price': product['price'],
            'flavor': flavor['name'],
            'quantity': 1
        })

        await db.update_user(callback.from_user.id, {
            'cart': cart,
            'cart_expires_at': (datetime.now() + timedelta(minutes=5)).isoformat()
        })

        await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)

    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –≤ select_flavor: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É")

@router.callback_query(F.data == "back_to_catalog")#–æ–±—Ä–æ–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥
async def back_to_catalog_handler(callback: CallbackQuery, state: FSMContext):
    try:    
        from config import CATEGORIES
        if not CATEGORIES:
            await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        await delete_product_cards(callback, state)
        await delete_previous_callback_messages(callback, state, "cart")

        await safe_delete_message(callback.message)

        keyboard = catalog_menu()
        if not keyboard.inline_keyboard:
            user_log.error("‚ö†Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞!")
            await callback.answer("–û—à–∏–±–∫–∞: –∫–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç", show_alert=True)
            return

        msg = await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=keyboard
        )

        await state.update_data(catalog_message_id=msg.message_id)
        await callback.answer()

    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –≤ back_to_catalog_handler: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")#–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω–∞
async def show_cart(message: Message, state: FSMContext):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await safe_delete_message(message.bot, message.chat.id, message.message_id)

        if await check_sleep_mode(message):
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        try:
            data = await state.get_data()
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
            catalog_message_id = data.get('catalog_message_id')
            if catalog_message_id:
                await safe_delete_message(message.bot, message.chat.id, catalog_message_id)
            
            # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            product_message_ids = data.get('product_message_ids', [])
            if product_message_ids:
                for message_id in product_message_ids:
                    await safe_delete_message(message.bot, message.chat.id, message_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏
            help_message_id = data.get('help_message_id')
            if help_message_id:
                await safe_delete_message(message.bot, message.chat.id, help_message_id)
        except Exception as e:
            user_log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

        user = await db.get_user(message.from_user.id)
        await show_cart_message(message, user, state)
    except Exception as e:
        user_log.error(f"Error in show_cart: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã", reply_markup=main_menu())


async def show_cart_message(message: Message, user: dict, state: FSMContext = None):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    if await check_cart_expiration(user):
        await clear_expired_cart(user['user_id'])
        cart_msg = await message.answer(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞ –∏–∑-–∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω—É—Ç)",
            reply_markup=main_menu()
        )
        if state:
            await state.update_data(cart_message_id=cart_msg.message_id)
        return

    if not user or not user.get('cart'):
        cart_msg = await message.answer(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
            reply_markup=main_menu()
        )
        if state:
            await state.update_data(cart_message_id=cart_msg.message_id)
        return

    cart = user['cart']
    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0

    for item in cart:
        name = item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        flavor = item.get('flavor')
        price = item.get('price', 0)
        quantity = item.get('quantity', 0)
        subtotal = price * quantity

        text += f"üì¶ {name}"
        if flavor:
            text += f" (üåà {flavor})"
        text += f"\nüí∞ {format_price(price)} ‚Ç∏ x {quantity} = {format_price(subtotal)} ‚Ç∏\n"
        text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"

        total += subtotal

    text += f"üíé <b>–ò—Ç–æ–≥–æ:</b> {format_price(total)} ‚Ç∏"

    keyboard = cart_full_kb(cart)
    cart_msg = await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    if state:
        await state.update_data(cart_message_id=cart_msg.message_id)


async def get_cart_item(user_id: int, product_id: str):#–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–∏–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    user = await db.get_user(user_id)
    if not user or not user.get('cart'):
        return None, None
    cart = user['cart']
    item = next((i for i in cart if str(i['product_id']) == str(product_id)), None)
    return user, item


@router.callback_query(F.data.startswith("increase_"))#—É–≤–µ–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∫—É—Å–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
async def increase_cart_item(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
        if not await check_rate_limit(callback.from_user.id, callback.data):
            await callback.answer("‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º", show_alert=True)
            return
            
        await delete_previous_callback_messages(callback, state, "cart")
        product_id = callback.data.replace("increase_", "")
        user, item = await get_cart_item(callback.from_user.id, product_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        if await check_cart_expiration(user):
            await clear_expired_cart(callback.from_user.id)
            await callback.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞ –∏–∑-–∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏", show_alert=True)
            return

        if not user or not item:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            return

        product = await db.get_product(product_id)
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        if 'flavor' in item:
            flavor = next((f for f in product.get('flavors', []) if f.get('name') == item['flavor']), None)
            if not flavor or flavor.get('quantity', 0) <= 0:
                await callback.answer("–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")
                return
            if not await db.update_product_flavor_quantity(product_id, item['flavor'], -1):
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
                return

        item['quantity'] += 1
        user['cart_expires_at'] = (datetime.now() + timedelta(minutes=10)).isoformat()

        await db.update_user(callback.from_user.id, {
            'cart': user['cart'],
            'cart_expires_at': user['cart_expires_at']
        })

        await show_cart_message(callback.message, user, state)
        await callback.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ")
    except Exception as e:
        user_log.error(f"Error in increase_cart_item: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("decrease_"))#—É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∫—É—Å–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
async def decrease_cart_item(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
        if not await check_rate_limit(callback.from_user.id, callback.data):
            await callback.answer("‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º", show_alert=True)
            return
            
        await delete_previous_callback_messages(callback, state, "cart")
        product_id = callback.data.replace("decrease_", "")
        user, item = await get_cart_item(callback.from_user.id, product_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        if await check_cart_expiration(user):
            await clear_expired_cart(callback.from_user.id)
            await callback.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞ –∏–∑-–∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏", show_alert=True)
            return

        if not user or not item:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            return

        if 'flavor' in item:
            if not await db.update_product_flavor_quantity(product_id, item['flavor'], 1):
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏", show_alert=True)
                return

        if item['quantity'] > 1:
            item['quantity'] -= 1
        else:
            user['cart'].remove(item)

        user['cart_expires_at'] = (
            (datetime.now() + timedelta(minutes=10)).isoformat() if user['cart'] else None
        )

        await db.update_user(callback.from_user.id, {
            'cart': user['cart'],
            'cart_expires_at': user['cart_expires_at']
        })

        await show_cart_message(callback.message, user, state)
        await callback.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")
    except Exception as e:
        user_log.error(f"Error in decrease_cart_item: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
        if not await check_rate_limit(callback.from_user.id, callback.data):
            await callback.answer("‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º", show_alert=True)
            return
            
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        await delete_previous_callback_messages(callback, state, "cart")
        
        user = await db.get_user(callback.from_user.id)
        if not user or not user.get('cart'):
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞")
            return
            
        # Return all flavors to inventory using atomic operations
        for item in user['cart']:
            if 'flavor' in item:
                await db.update_product_flavor_quantity(
                    item['product_id'],
                    item['flavor'],
                    item['quantity']
                )
        
        # Clear cart and expiration time
        await db.update_user(callback.from_user.id, {
            'cart': [],
            'cart_expires_at': None
        })
        
        await callback.message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", reply_markup=main_menu())
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
        
    except Exception as e:
        user_log.error(f"Error in clear_cart: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")

@router.callback_query(F.data.startswith("remove_"))
async def remove_item(callback: CallbackQuery, state: FSMContext):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        await delete_previous_callback_messages(callback, state, "cart")

        product_id = callback.data.replace("remove_", "")
        user, item = await get_cart_item(callback.from_user.id, product_id)
        
        if not user or not item:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            return
            
        # Return all quantity of the flavor to inventory
        if 'flavor' in item:
            success = await db.update_product_flavor_quantity(
                product_id,
                item['flavor'],
                item['quantity']
            )
            if not success:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞", show_alert=True)
                return
        
        # Remove item from cart
        user['cart'].remove(item)
        
        # Update cart expiration time if cart is not empty
        if user['cart']:
            user['cart_expires_at'] = (datetime.now() + timedelta(minutes=10)).isoformat()
        else:
            user['cart_expires_at'] = None
            
        # Update user's cart
        await db.update_user(callback.from_user.id, {
            'cart': user['cart'],
            'cart_expires_at': user['cart_expires_at']
        })
        
        # Show updated cart
        await show_cart_message(callback.message, user, state)
        await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        
    except Exception as e:
        user_log.error(f"Error in remove_item: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
        if not await check_rate_limit(callback.from_user.id, callback.data):
            await callback.answer("‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º", show_alert=True)
            return
            
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        await delete_previous_callback_messages(callback, state, "cart")
        
        if await check_sleep_mode(callback):
            return
    
        user = await db.get_user(callback.from_user.id)
        if not user or not user.get('cart'):
            await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            await callback.answer()
            return
        
        # Calculate total and prepare order items
        cart = user['cart']
        total = 0
        order_items = []
        
        # Check minimum quantities for Snus and E-liquid categories
        snus_total = 0
        liquid_total = 0
        
        # Count category totals
        for item in cart:
            product = await db.get_product(item['product_id'])
            if not product:
                await callback.message.answer(f"–¢–æ–≤–∞—Ä {item['name']} –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                await callback.answer()
                return
                
            # Count category totals
            if product.get('category') == '–°–Ω—é—Å':
                snus_total += item['quantity']
            elif product.get('category') == '–ñ–∏–¥–∫–æ—Å—Ç–∏':
                liquid_total += item['quantity']
        
        # Check minimum quantities
        if snus_total > 0 and snus_total < 1:
            await callback.message.answer(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –°–Ω—é—Å - 1 —à—Ç—É–∫.\n"
                f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {snus_total} —à—Ç."
            )
            await callback.answer()
            return
            
        if liquid_total > 0 and liquid_total < 3:
            await callback.message.answer(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ñ–∏–¥–∫–æ—Å—Ç–∏ - 1 —à—Ç—É–∫.\n"
                f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {liquid_total} —à—Ç."
            )
            await callback.answer()
            return
        
        # Prepare order items
        for item in cart:
            subtotal = item['price'] * item['quantity']
            total += subtotal
            order_item = {
                'product_id': item['product_id'],
                'name': item['name'],
                'price': item['price'],
                'quantity': item['quantity']
            }
            if 'flavor' in item:
                order_item['flavor'] = item['flavor']
            order_items.append(order_item)
        
        # Save order details in state
        await state.update_data(
            order_items=order_items,
            total_amount=total
        )
        
        # Ask for phone number
        await callback.message.answer(
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8XXXXXXXXXX"
        )
        await state.set_state(OrderStates.waiting_phone)
        await callback.answer()
    except Exception as e:
        user_log.error(f"Error in start_checkout: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu())

@router.message(OrderStates.waiting_phone)
async def process_phone(message: Message, state: FSMContext):
    try:
        if await check_sleep_mode(message):
            return
            
        # Validate phone number format
        phone = message.text.strip()
        if not phone.startswith('8') or not phone[1:].isdigit() or len(phone) != 11:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8XXXXXXXXXX")
            return
        
        # Save phone and ask for address
        await state.update_data(phone=phone)
        await message.answer(
            "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É –∏ –¥–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞ 123)"
        )
        await state.set_state(OrderStates.waiting_address)
    except Exception as e:
        user_log.error(f"Error in process_phone: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=main_menu())
        await state.clear()

@router.message(OrderStates.waiting_address)
async def process_address(message: Message, state: FSMContext):
    try:
        if await check_sleep_mode(message):
            return
            
        # Get all order data
        data = await state.get_data()
        user = await db.get_user(message.from_user.id)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ 2GIS
        address = message.text.strip()
        address_for_link = address.replace(' ', '%20').replace('/', '%2F')
        gis_link = f"https://2gis.kz/pavlodarr/search/{address_for_link}"
        
        # Save both original address and 2GIS link
        await state.update_data(
            address=address,
            gis_link=gis_link
        )
        
        cart = user['cart']
        total = sum(item['price'] * item['quantity'] for item in cart)
        
        # Get admin card from config
        admin_card = ADMIN_CARD
        admin_card_name = ADMIN_CARD_NAME
        
        payment_text = (
            f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {format_price(total)} ‚Ç∏ –Ω–∞ –∫–∞—Ä—Ç—É:\n\n"
           f'<a href="{admin_card}">–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a>\n\n'
            f"{admin_card_name}\n"
           "üëÜ –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑\n\n"
            "‚ö†Ô∏è –í–ê–ñ–ù–û:\n"
            "‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: –¥–æ 1000 ‚Ç∏ (–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)\n"
            "‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞\n"
            "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤\n"
            "‚Ä¢ –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –ª–∏—á–Ω–æ - –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è\n"
            "‚Ä¢ –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ –Ø–Ω–¥–µ–∫—Å.Go\n"
            "‚Ä¢ –ó–∞–∫–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–∞—á–∫–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"
        )
        
        await message.answer(payment_text, parse_mode="HTML")
        await state.set_state(OrderStates.waiting_payment)
    except Exception as e:
        user_log.error(f"Error in process_address: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥—Ä–µ—Å–∞", reply_markup=main_menu())
        await state.clear()

@router.message(OrderStates.waiting_payment)
async def handle_payment_proof(message: Message, state: FSMContext):
    try:
        if await check_sleep_mode(message):
            return
            
        if message.photo:
            file_id = message.photo[-1].file_id
            file_type = 'photo'
        elif message.document:
            file_id = message.document.file_id
            file_type = 'document'
        else:
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª–∞."
            )
            return

        # Get all order data
        data = await state.get_data()
        if not data:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu()
            )
            await state.clear()
            return

        user = await db.get_user(message.from_user.id)
        if not user or not user.get('cart'):
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=main_menu()
            )
            await state.clear()
            return

        cart = user['cart']
        total = sum(item['price'] * item['quantity'] for item in cart)
        
        # Create order data
        order_data = {
            'user_id': message.from_user.id,
            'username': message.from_user.username,
            'phone': data['phone'],
            'address': data['address'],
            'gis_link': data['gis_link'],
            'items': cart,
            'total_amount': total,
            'status': 'pending',
            'created_at': datetime.now(),
            'payment_file_id': file_id,
            'payment_file_type': file_type
        }
        
        # Create order in database
        order_result = await db.create_order(order_data)
        if not order_result:
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu()
            )
            await state.clear()
            return
            
        order_id = order_result  # create_order –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å ID
        
        # Clear user's cart
        await db.update_user(message.from_user.id, {'cart': []})
        
        # Send confirmation to user
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.\n"
            "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.",
            reply_markup=main_menu()
        )
        
        # Prepare user data for notification
        user_data = {
            'full_name': message.from_user.full_name,
            'username': message.from_user.username
        }
        
        # Format and send admin notification
        admin_text = format_order_notification(
            order_id=order_id,
            user_data=user_data,
            order_data=data,
            cart=cart,
            total=total
        )
        
        try:
            # First send the order details
            await message.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_text
            )
            
            # Then send the payment proof
            if file_type == 'photo':
                await message.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=file_id,
                    caption=f"üí≥ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}",
                    reply_markup=order_management_kb(order_id)
                )
            else:
                await message.bot.send_document(
                    chat_id=ADMIN_ID,
                    document=file_id,
                    caption=f"üí≥ –ß–µ–∫ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}",
                    reply_markup=order_management_kb(order_id)
                )
        except Exception as e:
            user_log.error(f"Failed to notify admin about order {order_id}: {str(e)}")
        
        await state.clear()
        
    except Exception as e:
        user_log.error(f"Error in handle_payment_proof: {str(e)}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu()
        )
        await state.clear()

@router.callback_query(F.data == "create_order")
async def start_order(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
        if await check_sleep_mode(callback):
            return
            
        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ ...
    except Exception as e:
        user_log.error(f"Error in start_order: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu())

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å") #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—à—å
async def show_help_menu(message: Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await safe_delete_message(message.bot, message.chat.id, message.message_id)
    
    # –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        data = await state.get_data()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
        catalog_message_id = data.get('catalog_message_id')
        if catalog_message_id:
            await safe_delete_message(message.bot, message.chat.id, catalog_message_id)
        
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        product_message_ids = data.get('product_message_ids', [])
        if product_message_ids:
            for message_id in product_message_ids:
                await safe_delete_message(message.bot, message.chat.id, message_id)
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            await state.update_data(product_message_ids=[])
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        cart_message_id = data.get('cart_message_id')
        if cart_message_id:
            await safe_delete_message(message.bot, message.chat.id, cart_message_id)
    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    await send_help_menu(message, state)

@router.callback_query(F.data == "show_help")  #–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—à—å
async def show_help_from_button(callback: CallbackQuery, state: FSMContext):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await safe_delete_message(callback.message.bot, callback.message.chat.id, callback.message.message_id)
        await safe_delete_message(callback.message)
    except Exception:
        pass

    await send_help_menu(callback.message, state)
    await callback.answer()
    
async def send_help_menu(target_message: Message, state: FSMContext = None):#–í—ã–∑–æ–≤ –º–µ–Ω—é –ø–æ–º–æ—â–∏
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
    help_msg = await target_message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:",
        reply_markup=help_menu()
    )
    if state:
        await state.update_data(help_message_id=help_msg.message_id)

@router.callback_query(F.data == "help_how_to_order")#–†–∞–∑–¥–µ–ª –ø–æ–º–æ—à–∏ (–ó–∞–∫–∞–∑)
async def show_how_to_order(callback: CallbackQuery, state: FSMContext):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏
        await delete_previous_callback_messages(callback, state, "help")
    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–º–æ—â–∏: {e}")
    
    text = """‚ùì –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:

    1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É
    3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
    4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
    5Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    6Ô∏è‚É£ –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É

    ‚ö†Ô∏è –í–ê–ñ–ù–û:
    ‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞–¥—Ä–µ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –±—É–¥–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤
    ‚Ä¢ –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ –Ø–Ω–¥–µ–∫—Å.Go
    ‚Ä¢ –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –ª–∏—á–Ω–æ - –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
    ‚Ä¢ –ó–∞–∫–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–∞—á–∫–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
    ‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Ö–æ–¥–∏—Ç –≤ —Å–æ–Ω –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 25 –∑–∞–∫–∞–∑–æ–≤

    –ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    
    await safe_delete_message(callback.message)
    help_msg = await callback.message.answer(text, reply_markup=help_menu())
    await state.update_data(help_message_id=help_msg.message_id)
    await callback.answer()

@router.callback_query(F.data == "help_payment")#–†–∞–∑–¥–µ–ª –ø–æ–º–æ—à–∏ (–û–ø–ª–∞—Ç–∞)
async def show_payment_info(callback: CallbackQuery, state: FSMContext):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏
        await delete_previous_callback_messages(callback, state, "help")
    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–º–æ—â–∏: {e}")
    
    text = """üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:

    ‚Ä¢ –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ (–ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É)
    ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: –¥–æ 1000 ‚Ç∏ (–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)

    ‚ö†Ô∏è –í–ê–ñ–ù–û:
    ‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞
    ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤
    ‚Ä¢ –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –ª–∏—á–Ω–æ - –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è"""
    
    await safe_delete_message(callback.message)
    help_msg = await callback.message.answer(text, reply_markup=help_menu())
    await state.update_data(help_message_id=help_msg.message_id)
    await callback.answer()

@router.callback_query(F.data == "help_delivery")#–†–∞–∑–¥–µ–ª –ø–æ–º–æ—à–∏ (–î–æ—Å—Ç–∞–≤–∫–∞)
async def show_delivery_info(callback: CallbackQuery, state: FSMContext):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏
        await delete_previous_callback_messages(callback, state, "help")
    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–º–æ—â–∏: {e}")
    
    text="""üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:
    ‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤
    ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: –¥–æ 1000 ‚Ç∏ (–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)
    ‚Ä¢ –ö—É—Ä—å–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç–∞–≤–∫–æ–π
    ‚Ä¢ –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ –Ø–Ω–¥–µ–∫—Å.Go
    ‚Ä¢ –ó–∞–∫–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–∞—á–∫–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏

    ‚ö†Ô∏è –í–ê–ñ–ù–û:
    ‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∞–¥—Ä–µ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –±—É–¥–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2-3 —á–∞—Å–æ–≤
    ‚Ä¢ –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –ª–∏—á–Ω–æ - –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è
    ‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Ö–æ–¥–∏—Ç –≤ —Å–æ–Ω –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 25 –∑–∞–∫–∞–∑–æ–≤

    –ü—Ä–æ—Å–∏–º –æ—Ç–Ω–µ—Å—Ç–∏—Å—å —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –≤ —ç—Ç–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ–µ –≤—Ä–µ–º—è."""

    await safe_delete_message(callback.message)
    help_msg = await callback.message.answer(text, reply_markup=help_menu())
    await state.update_data(help_message_id=help_msg.message_id)
    await callback.answer()

@router.callback_query(F.data == "help_contact")
async def show_contact_help(callback: CallbackQuery, state: FSMContext):
    try:
        await delete_previous_callback_messages(callback, state, "help")
    except Exception as e:
        user_log.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–¥—ã–¥—É—à–∏—Ö —Å–æ–æ–±—à–µ–Ω–∏–π: {e}")
    
    text="""
    ü§ô–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?
‚¨áÔ∏èTelegram –¥–ª—è —Å–≤—è–∑–∏‚¨áÔ∏è
            @tikto7182
    """
    await safe_delete_message(callback.message)
    help_msg = await callback.message.answer(text, reply_markup=help_menu())
    await state.update_data(help_message_id=help_msg.message_id)
    await callback.answer()



async def delete_welcome_message(message: Message, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = await state.get_data()
        welcome_message_id = data.get('welcome_message_id')
        
        if welcome_message_id:
            await safe_delete_message(message.bot, message.chat.id, welcome_message_id)
    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –≤ delete_welcome_message: {e}")

async def delete_previous_messages(message: Message, state: FSMContext, message_type: str = "catalog"):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
    try:
        data = await state.get_data()
        previous_message_id = data.get(f'{message_type}_message_id')
        
        if previous_message_id:
            await safe_delete_message(message.bot, message.chat.id, previous_message_id)
    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –≤ delete_previous_messages: {e}")

async def delete_previous_callback_messages(callback: CallbackQuery, state: FSMContext, message_type: str = "catalog"):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        data = await state.get_data()
        previous_message_id = data.get(f'{message_type}_message_id')
        
        if previous_message_id:
            await safe_delete_message(callback.message.bot, callback.message.chat.id, previous_message_id)
    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –≤ delete_previous_callback_messages: {e}")

async def delete_product_cards(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –∫–∞—Ç–∞–ª–æ–≥—É"""
    try:
        data = await state.get_data()
        product_message_ids = data.get('product_message_ids', [])
        
        if product_message_ids:
            for message_id in product_message_ids:
                await safe_delete_message(callback.message.bot, callback.message.chat.id, message_id)
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            await state.update_data(product_message_ids=[])
    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –≤ delete_product_cards: {e}")

@router.callback_query(F.data == "cancel_clear_cart")
async def cancel_clear_cart(callback: CallbackQuery, state: FSMContext):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã
        await delete_previous_callback_messages(callback, state, "cart")
        
        user = await db.get_user(callback.from_user.id)
        if not user or not user.get('cart'):
            await callback.message.edit_text(
                "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                reply_markup=main_menu()
            )
        else:
            total = sum(item['price'] * item['quantity'] for item in user['cart'])
            await callback.message.edit_text(
                f"üíµ –ò—Ç–æ–≥–æ: {format_price(total)} ‚Ç∏",
                reply_markup=cart_actions_kb()
            )
        await callback.answer("–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
    except Exception as e:
        user_log.error(f"Error in cancel_clear_cart: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def check_cart_expiration(user: dict) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not user or not user.get('cart') or not user.get('cart_expires_at'):
        return False
    
    try:
        expires_at = datetime.fromisoformat(user['cart_expires_at'])
        return datetime.now() > expires_at
    except (ValueError, TypeError):
        return False

async def clear_expired_cart(user_id: int) -> bool:
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à—É—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–µ"""
    try:
        user = await db.get_user(user_id)
        if not user or not user.get('cart'):
            return False
            
        if await check_cart_expiration(user):
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–µ
            for item in user['cart']:
                if 'flavor' in item:
                    await db.update_product_flavor_quantity(
                        item['product_id'],
                        item['flavor'],
                        item['quantity']
                    )
            
            # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            await db.update_user(user_id, {
                'cart': [],
                'cart_expires_at': None
            })
            
            user_log.info(f"Expired cart cleared for user {user_id}")
            return True
        return False
    except Exception as e:
        user_log.error(f"Error clearing expired cart for user {user_id}: {e}")
        return False

async def notify_cart_expiration(bot, user_id: int):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        await bot.send_message(
            chat_id=user_id,
            text="‚è∞ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–µ–Ω–∞ –∏–∑-–∑–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (5 –º–∏–Ω—É—Ç).\n"
                 "–¢–æ–≤–∞—Ä—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –Ω–∞–ª–∏—á–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –∑–∞–Ω–æ–≤–æ."
        )
    except Exception as e:
        user_log.error(f"Error notifying user {user_id} about cart expiration: {e}")

async def cleanup_expired_carts(bot=None):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ—Ä–∑–∏–Ω–∞–º–∏
        users = await db.get_users_with_cart()
        
        cleared_count = 0
        for user in users:
            if await clear_expired_cart(user['user_id']):
                cleared_count += 1
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ bot –¥–æ—Å—Ç—É–ø–µ–Ω
                if bot:
                    await notify_cart_expiration(bot, user['user_id'])
        
        if cleared_count > 0:
            user_log.info(f"Cleared {cleared_count} expired carts")
            
    except Exception as e:
        user_log.error(f"Error in cleanup_expired_carts: {e}")

async def start_cart_cleanup(bot=None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ—Ä–∑–∏–Ω"""
    while True:
        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        await cleanup_expired_carts(bot)

@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: CallbackQuery, state: FSMContext):
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_previous_callback_messages(callback, state, "cart")
        await delete_previous_callback_messages(callback, state, "catalog")
        await delete_previous_callback_messages(callback, state, "help")
        
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        await delete_product_cards(callback, state)
        
        await safe_delete_message(callback.message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
        welcome_msg = await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_menu()
        )
        
        await state.update_data(welcome_message_id=welcome_msg.message_id)
        await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
    except Exception as e:
        user_log.error(f"–û—à–∏–±–∫–∞ –≤ show_main_menu: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
