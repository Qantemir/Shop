from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

from database.mongodb import db
from keyboards.user_kb import (
    main_menu,
    catalog_menu,
    product_actions_kb,
    cart_actions_kb,
    cart_item_kb,
    confirm_order_kb
)

router = Router()

class OrderStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_address = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    # –í—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–≤–æ–¥–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(f"–í–∞—à ID: {message.from_user.id}")
    
    user_data = {
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        "first_name": message.from_user.first_name,
        "last_name": message.from_user.last_name,
        "cart": []
    }
    await db.create_user(user_data)
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!",
        reply_markup=main_menu()
    )

@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=catalog_menu()
    )

@router.callback_query(F.data.startswith("category_"))
async def show_category(callback: CallbackQuery):
    category = callback.data.replace("category_", "")
    products = await db.get_products_by_category(category)
    
    if not products:
        await callback.message.answer("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        return
    
    for product in products:
        caption = f"üì¶ {product['name']}\n"
        caption += f"üí∞ {product['price']} RUB\n"
        caption += f"üìù {product['description']}"
        
        await callback.message.answer_photo(
            photo=product['photo'],
            caption=caption,
            reply_markup=product_actions_kb(str(product['_id']))
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    product_id = callback.data.replace("add_to_cart_", "")
    product = await db.get_product(product_id)
    
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = await db.get_user(callback.from_user.id)
    cart = user.get('cart', [])
    
    # Check if product already in cart
    for item in cart:
        if item['product_id'] == product_id:
            item['quantity'] += 1
            break
    else:
        cart.append({
            'product_id': product_id,
            'name': product['name'],
            'price': product['price'],
            'quantity': 1
        })
    
    await db.update_user(callback.from_user.id, {'cart': cart})
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    user = await db.get_user(message.from_user.id)
    cart = user.get('cart', [])
    
    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    total = 0
    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    
    for item in cart:
        subtotal = item['price'] * item['quantity']
        total += subtotal
        text += f"üì¶ {item['name']}\n"
        text += f"üí∞ {item['price']} RUB x {item['quantity']} = {subtotal} RUB\n"
        text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    
    text += f"\nüíµ –ò—Ç–æ–≥–æ: {total} RUB"
    await message.answer(text, reply_markup=cart_actions_kb())

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderStates.waiting_for_phone)
    await callback.answer()

@router.message(OrderStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderStates.waiting_for_address)

@router.message(OrderStates.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    cart = user.get('cart', [])
    
    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        await state.clear()
        return
    
    data = await state.get_data()
    
    order_data = {
        'user_id': message.from_user.id,
        'phone': data['phone'],
        'address': message.text,
        'items': cart,
        'status': 'pending',
        'total': sum(item['price'] * item['quantity'] for item in cart)
    }
    
    await db.create_order(order_data)
    await db.update_user(message.from_user.id, {'cart': []})
    
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=main_menu()
    )
    await state.clear()

@router.message(F.text == "üì± –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_user_orders(message: Message):
    orders = await db.get_user_orders(message.from_user.id)
    
    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return
    
    for order in orders:
        text = f"–ó–∞–∫–∞–∑ #{order['_id']}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
        text += "–¢–æ–≤–∞—Ä—ã:\n"
        
        for item in order['items']:
            text += f"- {item['name']} x{item['quantity']} = {item['price'] * item['quantity']} RUB\n"
        
        text += f"\n–ò—Ç–æ–≥–æ: {order['total']} RUB"
        await message.answer(text)

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    await db.update_user(callback.from_user.id, {'cart': []})
    await callback.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await callback.answer()
