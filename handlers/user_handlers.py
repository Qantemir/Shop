from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

from database.mongodb import db
from keyboards.user_kb import (
    main_menu,
    catalog_menu,
    product_actions_kb,
    cart_actions_kb,
    cart_item_kb,
    confirm_order_kb,
    help_menu
)

router = Router()

class OrderStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_address = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    try:
        # Check if user already exists
        existing_user = await db.get_user(message.from_user.id)
        
        if not existing_user:
            user_data = {
                "user_id": message.from_user.id,
                "username": message.from_user.username,
                "first_name": message.from_user.first_name,
                "last_name": message.from_user.last_name,
                "cart": []
            }
            await db.create_user(user_data)
            print(f"[DEBUG] Created new user: {message.from_user.id}")
        
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!",
            reply_markup=main_menu()
        )
    except Exception as e:
        print(f"[ERROR] Error in start command: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=catalog_menu()
    )

@router.callback_query(F.data.startswith("category_"))
async def show_category(callback: CallbackQuery):
    category = callback.data.replace("category_", "")
    products = await db.get_products_by_category(category)
    
    if not products:
        await callback.message.answer("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        return
    
    for product in products:
        caption = f"üì¶ {product['name']}\n"
        caption += f"üí∞ {product['price']} RUB\n"
        caption += f"üìù {product['description']}"
        
        await callback.message.answer_photo(
            photo=product['photo'],
            caption=caption,
            reply_markup=product_actions_kb(str(product['_id']))
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    print("[DEBUG] Starting add_to_cart handler")
    try:
        product_id = callback.data.replace("add_to_cart_", "")
        print(f"[DEBUG] Product ID: {product_id}")
        
        # First, ensure user exists in database
        user = await db.get_user(callback.from_user.id)
        if not user:
            print("[DEBUG] User not found, creating new user")
            user_data = {
                "user_id": callback.from_user.id,
                "username": callback.from_user.username,
                "first_name": callback.from_user.first_name,
                "last_name": callback.from_user.last_name,
                "cart": []
            }
            await db.create_user(user_data)
            user = await db.get_user(callback.from_user.id)  # Get fresh user data
            
            if not user:
                print("[ERROR] Failed to create/retrieve user")
                await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
                return
        
        product = await db.get_product(product_id)
        print(f"[DEBUG] Found product: {product}")
        
        if not product:
            print("[DEBUG] Product not found")
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # Initialize cart if it doesn't exist
        cart = user.get('cart', [])
        if cart is None:
            cart = []
        print(f"[DEBUG] Current cart: {cart}")
        
        # Create new cart item
        cart_item = {
            'product_id': str(product_id),
            'name': product['name'],
            'price': product['price'],
            'quantity': 1
        }
        
        # Check if product already in cart
        found = False
        for item in cart:
            if item.get('product_id') == str(product_id):
                item['quantity'] += 1
                found = True
                print(f"[DEBUG] Increased quantity for existing item: {item}")
                break
        
        if not found:
            cart.append(cart_item)
            print(f"[DEBUG] Added new item to cart: {cart_item}")
        
        print(f"[DEBUG] Updated cart: {cart}")
        
        # Update user's cart
        update_result = await db.update_user(callback.from_user.id, {'cart': cart})
        print(f"[DEBUG] Update result: {update_result}")
        
        await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        print("[DEBUG] Successfully added to cart")
        
    except Exception as e:
        print(f"[ERROR] Error in add_to_cart: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")

@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    print("[DEBUG] Starting show_cart handler")
    try:
        # Check if user exists and create if not
        user = await db.get_user(message.from_user.id)
        if not user:
            print("[DEBUG] User not found in show_cart, creating new user")
            user_data = {
                "user_id": message.from_user.id,
                "username": message.from_user.username,
                "first_name": message.from_user.first_name,
                "last_name": message.from_user.last_name,
                "cart": []
            }
            await db.create_user(user_data)
            user = await db.get_user(message.from_user.id)
            
            if not user:
                print("[ERROR] Failed to create/retrieve user in show_cart")
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º")
                return
        
        cart = user.get('cart', [])
        if cart is None:
            cart = []
        print(f"[DEBUG] Cart data: {cart}")
        
        if not cart:
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=main_menu())
            return
        
        total = 0
        text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        
        for item in cart:
            subtotal = item['price'] * item['quantity']
            total += subtotal
            text += f"üì¶ {item['name']}\n"
            text += f"üí∞ {item['price']} Tg x {item['quantity']} = {subtotal} Tg\n"
            text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        
        text += f"\nüíµ –ò—Ç–æ–≥–æ: {total} Tg"
        await message.answer(text, reply_markup=cart_actions_kb())
        print("[DEBUG] Cart displayed successfully")
        
    except Exception as e:
        print(f"[ERROR] Error in show_cart: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start")

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderStates.waiting_for_phone)
    await callback.answer()

@router.message(OrderStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderStates.waiting_for_address)

@router.message(OrderStates.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)
    cart = user.get('cart', [])
    
    if not cart:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        await state.clear()
        return
    
    data = await state.get_data()
    
    order_data = {
        'user_id': message.from_user.id,
        'phone': data['phone'],
        'address': message.text,
        'items': cart,
        'status': 'pending',
        'total': sum(item['price'] * item['quantity'] for item in cart)
    }
    
    await db.create_order(order_data)
    await db.update_user(message.from_user.id, {'cart': []})
    
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=main_menu()
    )
    await state.clear()

@router.message(F.text == "üì± –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_user_orders(message: Message):
    orders = await db.get_user_orders(message.from_user.id)
    
    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return
    
    for order in orders:
        text = f"–ó–∞–∫–∞–∑ #{order['_id']}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
        text += "–¢–æ–≤–∞—Ä—ã:\n"
        
        for item in order['items']:
            text += f"- {item['name']} x{item['quantity']} = {item['price'] * item['quantity']} RUB\n"
        
        text += f"\n–ò—Ç–æ–≥–æ: {order['total']} RUB"
        await message.answer(text)

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    await db.update_user(callback.from_user.id, {'cart': []})
    await callback.message.edit_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await callback.answer()

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help_menu(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:",
        reply_markup=help_menu()
    )

@router.callback_query(F.data == "help_contacts")
async def show_contacts(callback: CallbackQuery):
    text = """üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:

‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
üì± WhatsApp: +7 (XXX) XXX-XX-XX
üìß Email: example@email.com
üìç –ê–¥—Ä–µ—Å: –≥. –ì–æ—Ä–æ–¥, —É–ª. –£–ª–∏—Ü–∞, –¥. XX

–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:
–ü–Ω-–ü—Ç: 10:00 - 20:00
–°–±-–í—Å: 11:00 - 18:00"""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

@router.callback_query(F.data == "help_how_to_order")
async def show_how_to_order(callback: CallbackQuery):
    text = """‚ùì –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:

1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É
3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
5Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
6Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑

–ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

@router.callback_query(F.data == "help_payment")
async def show_payment_info(callback: CallbackQuery):
    text = """üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:

1Ô∏è‚É£ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
2Ô∏è‚É£ –ö–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
3Ô∏è‚É£ –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ (–ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é)

–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

@router.callback_query(F.data == "help_delivery")
async def show_delivery_info(callback: CallbackQuery):
    text = """üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:

üì¶ –°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏:
- –°–∞–º–æ–≤—ã–≤–æ–∑ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
- –î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º –ø–æ –≥–æ—Ä–æ–¥—É
- –î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω—ã

‚è± –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:
- –ü–æ –≥–æ—Ä–æ–¥—É: 1-2 –¥–Ω—è
- –í —Ä–µ–≥–∏–æ–Ω—ã: 3-7 –¥–Ω–µ–π

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:
- –ü–æ –≥–æ—Ä–æ–¥—É: –æ—Ç XXX Tg
- –í —Ä–µ–≥–∏–æ–Ω—ã: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ

–¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()
