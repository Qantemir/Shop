from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from datetime import datetime

from database.mongodb import db
from keyboards.user_kb import (
    main_menu,
    catalog_menu,
    product_actions_kb,
    cart_actions_kb,
    cart_item_kb,
    confirm_order_kb,
    help_menu,
    confirm_clear_cart_kb
)
from keyboards.admin_kb import order_management_kb
from config import ADMIN_ID, ADMIN_CARD

router = Router()

class OrderStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_address = State()
    waiting_for_payment = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    try:
        # Check if user already exists
        existing_user = await db.get_user(message.from_user.id)
        
        if not existing_user:
            user_data = {
                "user_id": message.from_user.id,
                "username": message.from_user.username,
                "first_name": message.from_user.first_name,
                "last_name": message.from_user.last_name,
                "cart": []
            }
            await db.create_user(user_data)
            print(f"[DEBUG] Created new user: {message.from_user.id}")
        
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!",
            reply_markup=main_menu()
        )
    except Exception as e:
        print(f"[ERROR] Error in start command: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "üõç –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=catalog_menu()
    )

@router.callback_query(F.data.startswith("category_"))
async def show_category(callback: CallbackQuery):
    category = callback.data.replace("category_", "")
    products = await db.get_products_by_category(category)
    
    if not products:
        await callback.message.answer("–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
        return
    
    for product in products:
        caption = f"üì¶ {product['name']}\n"
        caption += f"üí∞ {product['price']} RUB\n"
        caption += f"üìù {product['description']}"
        
        await callback.message.answer_photo(
            photo=product['photo'],
            caption=caption,
            reply_markup=product_actions_kb(str(product['_id']))
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("add_to_cart_"))
async def add_to_cart(callback: CallbackQuery):
    print("[DEBUG] Starting add_to_cart handler")
    try:
        product_id = callback.data.replace("add_to_cart_", "")
        print(f"[DEBUG] Processing product_id: {product_id}")
        
        # Get product first to validate it exists
        product = await db.get_product(product_id)
        if not product:
            print(f"[DEBUG] Product not found: {product_id}")
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
            
        # Get or create user
        user = await db.get_user(callback.from_user.id)
        if not user:
            user_data = {
                "user_id": callback.from_user.id,
                "username": callback.from_user.username,
                "first_name": callback.from_user.first_name,
                "last_name": callback.from_user.last_name,
                "cart": []
            }
            user = await db.create_user(user_data)
        
        # Initialize cart if needed
        cart = user.get('cart', [])
        if cart is None:
            cart = []
        
        # Check if product already in cart
        found = False
        for item in cart:
            if item.get('product_id') == product_id:  # Using string comparison
                item['quantity'] += 1
                found = True
                break
        
        # Add new item if not found
        if not found:
            cart.append({
                'product_id': product_id,  # Store as string
                'name': product['name'],
                'price': product['price'],
                'quantity': 1
            })
        
        # Update cart
        await db.update_user(callback.from_user.id, {'cart': cart})
        await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        print(f"[DEBUG] Successfully added product {product_id} to cart")
        
    except Exception as e:
        print(f"[ERROR] Error in add_to_cart: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    print("[DEBUG] Starting show_cart handler")
    try:
        user = await db.get_user(message.from_user.id)
        
        # If no user or no cart, just show empty cart message
        if not user or not user.get('cart'):
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=main_menu())
            return
        
        cart = user['cart']
        total = 0
        
        # Show each item in cart
        for item in cart:
            subtotal = item['price'] * item['quantity']
            total += subtotal
            await message.answer(
                f"üì¶ {item['name']}\n"
                f"üí∞ {item['price']} Tg x {item['quantity']} = {subtotal} Tg",
                reply_markup=cart_item_kb(str(item['product_id']))
            )
        
        # Show total
        await message.answer(
            f"üíµ –ò—Ç–æ–≥–æ: {total} Tg",
            reply_markup=cart_actions_kb()
        )
        print("[DEBUG] Cart displayed successfully")
        
    except Exception as e:
        print(f"[ERROR] Error in show_cart: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã")

@router.callback_query(F.data.startswith("increase_"))
async def increase_item(callback: CallbackQuery):
    try:
        product_id = callback.data.replace("increase_", "")
        print(f"[DEBUG] Increasing quantity for product: {product_id}")
        
        user = await db.get_user(callback.from_user.id)
        if not user or not user.get('cart'):
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
            
        cart = user['cart']
        item = next((item for item in cart if item['product_id'] == product_id), None)
        
        if item:
            item['quantity'] += 1
            await db.update_user(callback.from_user.id, {'cart': cart})
            
            subtotal = item['price'] * item['quantity']
            await callback.message.edit_text(
                f"üì¶ {item['name']}\n"
                f"üí∞ {item['price']} Tg x {item['quantity']} = {subtotal} Tg",
                reply_markup=cart_item_kb(product_id)
            )
            await callback.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ")
        else:
            print(f"[DEBUG] Item not found in cart: {product_id}")
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            
    except Exception as e:
        print(f"[ERROR] Error in increase_item: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("decrease_"))
async def decrease_item(callback: CallbackQuery):
    try:
        product_id = callback.data.replace("decrease_", "")
        print(f"[DEBUG] Decreasing quantity for product: {product_id}")
        
        user = await db.get_user(callback.from_user.id)
        if not user or not user.get('cart'):
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
            
        cart = user['cart']
        item = next((item for item in cart if item['product_id'] == product_id), None)
        
        if item:
            if item['quantity'] > 1:
                item['quantity'] -= 1
                await db.update_user(callback.from_user.id, {'cart': cart})
                
                subtotal = item['price'] * item['quantity']
                await callback.message.edit_text(
                    f"üì¶ {item['name']}\n"
                    f"üí∞ {item['price']} Tg x {item['quantity']} = {subtotal} Tg",
                    reply_markup=cart_item_kb(product_id)
                )
                await callback.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")
            else:
                await callback.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚ùå –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
        else:
            print(f"[DEBUG] Item not found in cart: {product_id}")
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
            
    except Exception as e:
        print(f"[ERROR] Error in decrease_item: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("remove_"))
async def remove_item(callback: CallbackQuery):
    try:
        product_id = callback.data.replace("remove_", "")
        print(f"[DEBUG] Removing product from cart: {product_id}")
        
        user = await db.get_user(callback.from_user.id)
        if not user or not user.get('cart'):
            await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            return
            
        cart = user['cart']
        # Remove item with matching product_id
        cart = [item for item in cart if item['product_id'] != product_id]
        await db.update_user(callback.from_user.id, {'cart': cart})
        
        await callback.message.delete()
        await callback.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        
        if not cart:
            await callback.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=main_menu())
            
    except Exception as e:
        print(f"[ERROR] Error in remove_item: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "confirm_clear_cart")
async def confirm_clear_cart(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É?",
        reply_markup=confirm_clear_cart_kb()
    )
    await callback.answer()

@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    try:
        await db.update_user(callback.from_user.id, {'cart': []})
        await callback.message.edit_text(
            "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!",
            reply_markup=main_menu()
        )
        await callback.answer()
    except Exception as e:
        print(f"[ERROR] Error in clear_cart: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")

@router.callback_query(F.data == "cancel_clear_cart")
async def cancel_clear_cart(callback: CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    cart = user.get('cart', [])
    
    if not cart:
        await callback.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=main_menu())
    else:
        total = sum(item['price'] * item['quantity'] for item in cart)
        await callback.message.edit_text(
            f"üíµ –ò—Ç–æ–≥–æ: {total} Tg",
            reply_markup=cart_actions_kb()
        )
    await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

@router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderStates.waiting_for_phone)
    await callback.answer()

@router.message(OrderStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderStates.waiting_for_address)

@router.message(OrderStates.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    try:
        user = await db.get_user(message.from_user.id)
        cart = user.get('cart', [])
        
        if not cart:
            await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
            await state.clear()
            return
        
        data = await state.get_data()
        total = sum(item['price'] * item['quantity'] for item in cart)
        
        # Save address and create order
        await state.update_data(address=message.text, total=total)
        
        # Send payment instructions
        payment_msg = (
            f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {total} Tg –Ω–∞ –∫–∞—Ä—Ç—É:\n\n"
            f"<code>{ADMIN_CARD}</code>\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –∏–ª–∏ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã."
        )
        await message.answer(payment_msg, parse_mode="HTML")
        await state.set_state(OrderStates.waiting_for_payment)
        
    except Exception as e:
        print(f"[ERROR] Error in process_address: {str(e)}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu()
        )
        await state.clear()

@router.message(OrderStates.waiting_for_payment, F.photo)
async def process_payment(message: Message, state: FSMContext):
    try:
        user = await db.get_user(message.from_user.id)
        cart = user.get('cart', [])
        data = await state.get_data()
        
        # Create order data
        order_data = {
            'user_id': message.from_user.id,
            'username': message.from_user.username,
            'phone': data['phone'],
            'address': data['address'],
            'items': cart,
            'status': 'pending',
            'total': data['total'],
            'created_at': datetime.now(),
            'payment_photo': message.photo[-1].file_id
        }
        
        # Create order in database
        order_result = await db.create_order(order_data)
        order_id = str(order_result.inserted_id)
        
        # Clear user's cart
        await db.update_user(message.from_user.id, {'cart': []})
        
        # Send confirmation to user
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã. "
            "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.",
            reply_markup=main_menu()
        )
        
        # Notify admin about new order
        admin_notification = (
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
            f"üë§ –û—Ç: {message.from_user.full_name} (@{message.from_user.username})\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n\n"
            f"üõç –¢–æ–≤–∞—Ä—ã:\n"
        )
        
        for item in cart:
            subtotal = item['price'] * item['quantity']
            admin_notification += f"- {item['name']} x{item['quantity']} = {subtotal} Tg\n"
        
        admin_notification += f"\nüí∞ –ò—Ç–æ–≥–æ: {data['total']} Tg"
        
        # Send notification and payment photo to admin
        try:
            await message.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=message.photo[-1].file_id,
                caption=admin_notification,
                reply_markup=order_management_kb(order_id)
            )
        except Exception as e:
            print(f"[ERROR] Failed to notify admin about order {order_id}: {str(e)}")
        
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Error in process_payment: {str(e)}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu()
        )
        await state.clear()

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help_menu(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:",
        reply_markup=help_menu()
    )

@router.callback_query(F.data == "help_contacts")
async def show_contacts(callback: CallbackQuery):
    text = """üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:

‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX
üì± WhatsApp: +7 (XXX) XXX-XX-XX
üìß Email: example@email.com
üìç –ê–¥—Ä–µ—Å: –≥. –ì–æ—Ä–æ–¥, —É–ª. –£–ª–∏—Ü–∞, –¥. XX

–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:
–ü–Ω-–ü—Ç: 10:00 - 20:00
–°–±-–í—Å: 11:00 - 18:00"""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

@router.callback_query(F.data == "help_how_to_order")
async def show_how_to_order(callback: CallbackQuery):
    text = """‚ùì –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:

1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
2Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É
3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
5Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
6Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑

–ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

@router.callback_query(F.data == "help_payment")
async def show_payment_info(callback: CallbackQuery):
    text = """üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:

1Ô∏è‚É£ –ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
2Ô∏è‚É£ –ö–∞—Ä—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏
3Ô∏è‚É£ –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ (–ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é)

–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

@router.callback_query(F.data == "help_delivery")
async def show_delivery_info(callback: CallbackQuery):
    text = """üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:

üì¶ –°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏:
- –°–∞–º–æ–≤—ã–≤–æ–∑ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
- –î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º –ø–æ –≥–æ—Ä–æ–¥—É
- –î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ä–µ–≥–∏–æ–Ω—ã

‚è± –°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:
- –ü–æ –≥–æ—Ä–æ–¥—É: 1-2 –¥–Ω—è
- –í —Ä–µ–≥–∏–æ–Ω—ã: 3-7 –¥–Ω–µ–π

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:
- –ü–æ –≥–æ—Ä–æ–¥—É: –æ—Ç XXX Tg
- –í —Ä–µ–≥–∏–æ–Ω—ã: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ

–¢–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."""
    
    await callback.message.edit_text(text, reply_markup=help_menu())
    await callback.answer()

# Add handler for order status updates (notifications to users)
@router.callback_query(F.data.startswith("order_status_"))
async def handle_order_status_update(callback: CallbackQuery):
    try:
        _, order_id, new_status = callback.data.split("_")
        order = await db.get_order(order_id)
        
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Update order status
        await db.update_order_status(order_id, new_status)
        
        # Notify user about status change
        status_messages = {
            "confirmed": "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!",
            "cancelled": "‚ùå –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            "completed": "üéâ –í–∞—à –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
            "paid": "üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ."
        }
        
        if new_status in status_messages:
            try:
                await callback.bot.send_message(
                    chat_id=order['user_id'],
                    text=f"üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #{order_id}:\n\n{status_messages[new_status]}"
                )
            except Exception as e:
                print(f"[ERROR] Failed to notify user about order status: {str(e)}")
        
        await callback.message.edit_text(
            f"{callback.message.text}\n\n–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {ORDER_STATUSES[new_status]}",
            reply_markup=order_management_kb(order_id)
        )
        await callback.answer("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        print(f"[ERROR] Error in handle_order_status_update: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
