from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, timedelta
import asyncio

from config import ADMIN_ID
from database.mongodb import db
from keyboards.admin_kb import (
    admin_main_menu,
    product_management_kb,
    categories_kb,
    order_management_kb,
    confirm_action_kb,
    sleep_mode_kb
)
from keyboards.user_kb import main_menu
from utils.security import security_manager

router = Router()

class AdminStates(StatesGroup):
    waiting_password = State()
    adding_product = State()
    editing_product = State()
    setting_name = State()
    setting_price = State()
    setting_description = State()
    setting_image = State()
    broadcasting = State()
    confirm_broadcast = State()
    adding_flavor = State()
    editing_flavors = State()
    setting_sleep_time = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞

# Helper function to format price with decimal points
def format_price(price):
    return f"{float(price):.2f}"

# –ó–∞—â–∏—â–∞–µ–º –≤—Å–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–µ—Å—Å–∏–∏
def check_admin_session(func):
    from functools import wraps
    
    @wraps(func)
    async def wrapper(*args, **kwargs):
        # –ü–æ–ª—É—á–∞–µ–º event –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ (Message –∏–ª–∏ CallbackQuery)
        event = args[0] if args else None
        if not event:
            print("[DEBUG] check_admin_session - No event object found")
            return
        
        user_id = event.from_user.id
        print(f"[DEBUG] check_admin_session - User ID: {user_id}")
        print(f"[DEBUG] check_admin_session - Is admin: {user_id == ADMIN_ID}")
        print(f"[DEBUG] check_admin_session - Session valid: {security_manager.is_admin_session_valid(user_id)}")
        
        if user_id != ADMIN_ID or not security_manager.is_admin_session_valid(user_id):
            print("[DEBUG] check_admin_session - Access denied")
            if isinstance(event, Message):
                await event.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin")
            elif isinstance(event, CallbackQuery):
                await event.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", show_alert=True)
            return
        print("[DEBUG] check_admin_session - Access granted")
        
        # –£–¥–∞–ª—è–µ–º dispatcher –∏–∑ kwargs –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        kwargs.pop('dispatcher', None)
        return await func(*args, **kwargs)
    return wrapper

@router.message(Command("admin"))
async def admin_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    print(f"[DEBUG] admin_start - User ID: {user_id}")
    print(f"[DEBUG] admin_start - ADMIN_ID: {ADMIN_ID}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_ID:
        print("[DEBUG] admin_start - Not an admin")
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not security_manager.check_failed_attempts(user_id):
        print("[DEBUG] admin_start - User is blocked")
        remaining_time = security_manager.get_block_time_remaining(user_id)
        await message.answer(
            f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {remaining_time.seconds // 60} –º–∏–Ω—É—Ç."
        )
        return

    # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    if security_manager.is_admin_session_valid(user_id):
        print("[DEBUG] admin_start - Session is valid, showing menu")
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_main_menu())
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
    print("[DEBUG] admin_start - Requesting password")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(AdminStates.waiting_password)

@router.message(AdminStates.waiting_password)
async def check_admin_password(message: Message, state: FSMContext):
    user_id = message.from_user.id
    print(f"[DEBUG] check_admin_password - User ID: {user_id}")
    
    if user_id != ADMIN_ID:
        print("[DEBUG] check_admin_password - Not an admin")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    print("[DEBUG] check_admin_password - Verifying password")
    if security_manager.verify_password(message.text):
        print("[DEBUG] check_admin_password - Password correct")
        security_manager.create_admin_session(user_id)
        security_manager.reset_attempts(user_id)
        await message.answer("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.", reply_markup=admin_main_menu())
        await state.clear()
    else:
        print("[DEBUG] check_admin_password - Password incorrect")
        security_manager.add_failed_attempt(user_id)
        attempts_left = security_manager.max_attempts - security_manager.failed_attempts.get(user_id, 0)
        
        if attempts_left > 0:
            await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}")
        else:
            block_time = security_manager.block_time.seconds // 60
            await message.answer(f"–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {block_time} –º–∏–Ω—É—Ç.")
            await state.clear()

@router.message(Command("logout"))
@check_admin_session
async def admin_logout(message: Message):
    try:
        user_id = message.from_user.id
        security_manager.remove_admin_session(user_id)
        await message.answer(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin",
            reply_markup=main_menu()
        )
    except Exception as e:
        print(f"[ERROR] Error in admin_logout: {str(e)}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            reply_markup=main_menu()
        )

@router.message(F.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
async def product_management(message: Message, **kwargs):
    print("[DEBUG] Entering product_management handler")
    print(f"[DEBUG] User ID: {message.from_user.id}")
    print(f"[DEBUG] kwargs: {kwargs}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = message.from_user.id
    if user_id != ADMIN_ID or not security_manager.is_admin_session_valid(user_id):
        print("[DEBUG] Access denied")
        await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin")
        return
    
    try:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏:",
            reply_markup=product_management_kb()
        )
        print("[DEBUG] Successfully sent product management menu")
    except Exception as e:
        print(f"[ERROR] Error in product_management: {str(e)}")

@router.callback_query(F.data == "back_to_admin_menu")
@check_admin_session
async def back_to_admin_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=None
    )
    await callback.message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=admin_main_menu()
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_product_management")
@check_admin_session
async def back_to_product_management(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏:",
        reply_markup=product_management_kb()
    )
    await callback.answer()

@router.callback_query(F.data == "list_products")
@check_admin_session
async def list_products(callback: CallbackQuery):
    products = await db.get_all_products()
    if not products:
        await callback.message.edit_text(
            "–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
            reply_markup=product_management_kb()
        )
        await callback.answer()
        return
    
    text = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
    for product in products:
        text += f"üì¶ {product['name']}\n"
        text += f"üí∞ {product['price']} Tg\n"
        text += f"üìù {product['description']}\n"
        text += "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=product_management_kb()
    )
    await callback.answer()

@router.callback_query(F.data == "add_product")
@check_admin_session
async def add_product_start(callback: CallbackQuery, state: FSMContext):
    print("[DEBUG] Entering add_product_start handler")
    print(f"[DEBUG] User ID: {callback.from_user.id}")
    try:
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
        await state.clear()
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=categories_kb(True)
        )
        await state.set_state(AdminStates.setting_name)
        print(f"[DEBUG] State set to: {AdminStates.setting_name}")
        await callback.answer()
        print("[DEBUG] Successfully showed categories menu")
    except Exception as e:
        print(f"[ERROR] Error in add_product_start: {str(e)}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=product_management_kb()
        )

@router.callback_query(F.data == "edit_products")
@check_admin_session
async def edit_products_list(callback: CallbackQuery):
    products = await db.get_all_products()
    if not products:
        await callback.message.edit_text(
            "–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
            reply_markup=product_management_kb()
        )
        await callback.answer()
        return
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    keyboard = []
    for product in products:
        text += f"üì¶ {product['name']} - {product['price']} Tg\n"
        keyboard.append([InlineKeyboardButton(
            text=f"‚úèÔ∏è {product['name']}",
            callback_data=f"edit_product_{product['_id']}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_product_management")])
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@router.callback_query(F.data == "delete_product")
@check_admin_session
async def delete_product_list(callback: CallbackQuery):
    products = await db.get_all_products()
    if not products:
        await callback.message.edit_text(
            "–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç",
            reply_markup=product_management_kb()
        )
        await callback.answer()
        return
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    keyboard = []
    for product in products:
        text += f"üì¶ {product['name']} - {product['price']} Tg\n"
        keyboard.append([InlineKeyboardButton(
            text=f"‚ùå {product['name']}",
            callback_data=f"confirm_delete_{product['_id']}"
        )])
    
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_product_management")])
    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_"))
@check_admin_session
async def confirm_delete_product(callback: CallbackQuery):
    product_id = callback.data.replace("confirm_delete_", "")
    await db.delete_product(product_id)
    await callback.message.edit_text(
        "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        reply_markup=product_management_kb()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_product_"))
@check_admin_session
async def edit_product_menu(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = callback.data.replace("edit_product_", "")
        product = await db.get_product(product_id)
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        await state.update_data(editing_product_id=product_id)
        keyboard = [
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{product_id}")],
            [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price_{product_id}")],
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{product_id}")],
            [InlineKeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photo_{product_id}")],
            [InlineKeyboardButton(text="üåà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏", callback_data=f"manage_flavors_{product_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_product_management")]
        ]
        
        text = f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n"
        text += f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
        text += f"üí∞ –¶–µ–Ω–∞: {format_price(product['price'])} Tg\n"
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
        
        if 'flavors' in product and product['flavors']:
            text += "\nüåà –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã:\n"
            for flavor in product['flavors']:
                text += f"‚Ä¢ {flavor}\n"
        
        await callback.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await callback.answer()
    except Exception as e:
        print(f"[ERROR] Error in edit_product_menu: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(AdminStates.setting_name)
@check_admin_session
async def process_edit_name(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª—è–µ–º –ª–∏ –º—ã –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        if data.get('is_adding_product'):
            print("[DEBUG] Processing new product name")
            await state.update_data(name=message.text)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
            await state.set_state(AdminStates.setting_price)
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        product_id = data.get('editing_product_id')
        if not product_id:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # Update product name
        await db.update_product(product_id, {'name': message.text})
        
        # Get updated product info
        product = await db.get_product(product_id)
        if not product:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # Show updated product info
        keyboard = [
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{product_id}")],
            [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price_{product_id}")],
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{product_id}")],
            [InlineKeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photo_{product_id}")],
            [InlineKeyboardButton(text="üåà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏", callback_data=f"manage_flavors_{product_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_product_management")]
        ]
        
        text = f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        text += f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
        text += f"üí∞ –¶–µ–Ω–∞: {product['price']} Tg\n"
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
        
        if 'flavors' in product and product['flavors']:
            text += "\nüåà –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã:\n"
            for flavor in product['flavors']:
                text += f"‚Ä¢ {flavor}\n"
        
        await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Error in process_edit_name: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è")
        await state.clear()

@router.message(AdminStates.adding_product)
@check_admin_session
async def add_product_name(message: Message, state: FSMContext):
    print("[DEBUG] Entering add_product_name handler")
    print(f"[DEBUG] Received name: {message.text}")
    try:
        data = await state.get_data()
        if 'category' not in data:
            print("[ERROR] No category in state data")
            await message.answer(
                "–û—à–∏–±–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=product_management_kb()
            )
            await state.clear()
            return

        await state.update_data(name=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        await state.set_state(AdminStates.setting_price)
        print(f"[DEBUG] State set to: {AdminStates.setting_price}")
    except Exception as e:
        print(f"[ERROR] Error in add_product_name: {str(e)}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=product_management_kb()
        )
        await state.clear()

@router.message(AdminStates.setting_price)
@check_admin_session
async def process_edit_price(message: Message, state: FSMContext):
    try:
        if not message.text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã:")
            print("[DEBUG] Invalid price format")
            return
            
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª—è–µ–º –ª–∏ –º—ã –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        if data.get('is_adding_product'):
            print("[DEBUG] Processing new product price")
            await state.update_data(price=int(message.text))
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
            await state.set_state(AdminStates.setting_description)
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        product_id = data.get('editing_product_id')
        if not product_id:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # Update product price
        await db.update_product(product_id, {'price': int(message.text)})
        
        # Get updated product info
        product = await db.get_product(product_id)
        if not product:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # Show updated product info
        keyboard = [
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{product_id}")],
            [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price_{product_id}")],
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{product_id}")],
            [InlineKeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photo_{product_id}")],
            [InlineKeyboardButton(text="üåà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏", callback_data=f"manage_flavors_{product_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_product_management")]
        ]
        
        text = f"‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
        text += f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
        text += f"üí∞ –¶–µ–Ω–∞: {format_price(product['price'])} Tg\n"
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
        
        if 'flavors' in product and product['flavors']:
            text += "\nüåà –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã:\n"
            for flavor in product['flavors']:
                text += f"‚Ä¢ {flavor}\n"
        
        await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Error in process_edit_price: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã")
        await state.clear()

@router.message(AdminStates.setting_description)
@check_admin_session
async def process_edit_description(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª—è–µ–º –ª–∏ –º—ã –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        if data.get('is_adding_product'):
            print("[DEBUG] Processing new product description")
            await state.update_data(description=message.text)
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞:")
            await state.set_state(AdminStates.setting_image)
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        product_id = data.get('editing_product_id')
        if not product_id:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # Update product description
        await db.update_product(product_id, {'description': message.text})
        
        # Get updated product info
        product = await db.get_product(product_id)
        if not product:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # Show updated product info
        keyboard = [
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{product_id}")],
            [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price_{product_id}")],
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{product_id}")],
            [InlineKeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photo_{product_id}")],
            [InlineKeyboardButton(text="üåà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏", callback_data=f"manage_flavors_{product_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_product_management")]
        ]
        
        text = f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        text += f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
        text += f"üí∞ –¶–µ–Ω–∞: {product['price']} Tg\n"
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
        
        if 'flavors' in product and product['flavors']:
            text += "\nüåà –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã:\n"
            for flavor in product['flavors']:
                text += f"‚Ä¢ {flavor}\n"
        
        await message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Error in process_edit_description: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è")
        await state.clear()

@router.message(AdminStates.setting_image, F.photo)
@check_admin_session
async def process_edit_photo(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–ª—è–µ–º –ª–∏ –º—ã –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        if data.get('is_adding_product'):
            print("[DEBUG] Processing new product photo")
            photo_id = message.photo[-1].file_id
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            product_data = {
                "name": data["name"],
                "category": data["category"],
                "price": data["price"],
                "description": data["description"],
                "photo": photo_id,
                "available": True
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await db.add_product(product_data)
            
            await message.answer(
                "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=product_management_kb()
            )
            await state.clear()
            return
            
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        product_id = data.get('editing_product_id')
        if not product_id:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # Update product photo
        photo_id = message.photo[-1].file_id
        await db.update_product(product_id, {'photo': photo_id})
        
        # Get updated product info
        product = await db.get_product(product_id)
        if not product:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # Show updated product info
        keyboard = [
            [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{product_id}")],
            [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price_{product_id}")],
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{product_id}")],
            [InlineKeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photo_{product_id}")],
            [InlineKeyboardButton(text="üåà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏", callback_data=f"manage_flavors_{product_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_product_management")]
        ]
        
        text = f"‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        text += f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
        text += f"üí∞ –¶–µ–Ω–∞: {product['price']} Tg\n"
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
        
        if 'flavors' in product and product['flavors']:
            text += "\nüåà –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã:\n"
            for flavor in product['flavors']:
                text += f"‚Ä¢ {flavor}\n"
        
        # Send new photo with updated info
        await message.answer_photo(
            photo=photo_id,
            caption=text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Error in process_edit_photo: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
        await state.clear()

async def cleanup_old_orders():
    """Clean up orders that are older than 24 hours and have been completed or cancelled"""
    cutoff_time = datetime.utcnow() - timedelta(hours=24)
    await db.delete_old_orders(cutoff_time)

@router.message(F.text == "üìä –ó–∞–∫–∞–∑—ã")
@check_admin_session
async def show_orders(message: Message):
    try:
        # Clean up old orders first
        await cleanup_old_orders()
        
        orders = await db.get_all_orders()
        if not orders:
            await message.answer("–ó–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return
        
        ORDER_STATUSES = {
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
            'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
            'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω'
        }
        
        for order in orders:
            status = order.get('status', 'pending')
            status_text = ORDER_STATUSES.get(status, "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            
            text = f"–ó–∞–∫–∞–∑ #{order['_id']}\n"
            text += f"–û—Ç: {order.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ({order['user_id']})\n"
            if order.get('phone'):
                text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
            if order.get('address'):
                text += f"üìç –ê–¥—Ä–µ—Å: {order['address']}\n"
            text += f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
            text += "–¢–æ–≤–∞—Ä—ã:\n"
            
            total = 0
            for item in order['items']:
                subtotal = item['price'] * item['quantity']
                text += f"- {item['name']}"
                if 'flavor' in item:
                    text += f" (üåà {item['flavor']})"
                text += f" x{item['quantity']} = {format_price(subtotal)} Tg\n"
                total += subtotal
            
            text += f"\n–ò—Ç–æ–≥–æ: {format_price(total)} Tg"
            
            # If order has cancellation reason, show it
            if status == 'cancelled' and order.get('cancellation_reason'):
                text += f"\n\n–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã: {order['cancellation_reason']}"
            
            await message.answer(
                text,
                reply_markup=order_management_kb(str(order['_id']), status)
            )
    except Exception as e:
        print(f"[ERROR] Error in show_orders: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤")

@router.callback_query(F.data.startswith("order_status_"))
async def update_order_status(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
    
    _, order_id, status = callback.data.split("_")
    await db.update_order_status(order_id, status)
    await callback.message.edit_text(
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {status}",
        reply_markup=order_management_kb(order_id)
    )
    await callback.answer()

@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@check_admin_session
async def show_statistics(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    products = await db.get_all_products()
    orders = await db.get_all_orders()
    users = await db.get_all_users()
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–æ–≤
    total_revenue = sum(order.get('total', 0) for order in orders)
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞–∫–∞–∑–æ–≤
    status_counts = {}
    for order in orders:
        status = order.get('status', 'unknown')
        status_counts[status] = status_counts.get(status, 0) + 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"
    stats_text += f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}\n"
    stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
    stats_text += f"üõç –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}\n"
    stats_text += f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_revenue} RUB\n\n"
    
    stats_text += "üìã –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤:\n"
    for status, count in status_counts.items():
        stats_text += f"- {status}: {count}\n"
    
    await message.answer(stats_text)

@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
@check_admin_session
async def broadcast_start(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
    )
    await state.set_state(AdminStates.broadcasting)

@router.message(Command("cancel"))
@check_admin_session
async def cancel_broadcast(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == AdminStates.broadcasting:
        await state.clear()
        await message.answer(
            "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=admin_main_menu()
        )

@router.message(AdminStates.broadcasting)
@check_admin_session
async def prepare_broadcast(message: Message, state: FSMContext):
    await state.update_data(broadcast_text=message.text)
    await message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{message.text}\n\n"
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å? (–¥–∞/–Ω–µ—Ç)"
    )
    await state.set_state(AdminStates.confirm_broadcast)

@router.message(AdminStates.confirm_broadcast)
@check_admin_session
async def confirm_broadcast(message: Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        data = await state.get_data()
        broadcast_text = data.get("broadcast_text")
        
        if not broadcast_text:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        users = await db.get_all_users()
        sent_count = 0
        failed_count = 0
        
        for user in users:
            try:
                await message.bot.send_message(
                    chat_id=user['user_id'],
                    text=broadcast_text
                )
                sent_count += 1
                await asyncio.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                print(f"[ERROR] Failed to send broadcast to user {user['user_id']}: {str(e)}")
                failed_count += 1
                continue
        
        status_text = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        status_text += f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        if failed_count > 0:
            status_text += f"‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_count}\n"
        
        await message.answer(
            status_text,
            reply_markup=admin_main_menu()
        )
    else:
        await message.answer(
            "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=admin_main_menu()
        )
    
    await state.clear()

@router.callback_query(F.data.startswith("add_to_"))
@check_admin_session
async def add_product_category(callback: CallbackQuery, state: FSMContext):
    print("[DEBUG] Entering add_product_category handler")
    print(f"[DEBUG] Callback data: {callback.data}")
    try:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        category = callback.data.replace("add_to_", "")

        print(f"[DEBUG] Selected category: {category}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è
        await state.update_data(category=category, is_adding_product=True)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        )
        await state.set_state(AdminStates.setting_name)
        print(f"[DEBUG] State set to: {AdminStates.setting_name}")
        await callback.answer()
    except Exception as e:
        print(f"[ERROR] Error in add_product_category: {str(e)}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=product_management_kb()
        )

@router.message(AdminStates.setting_price)
@check_admin_session
async def add_product_price(message: Message, state: FSMContext):
    print("[DEBUG] Entering add_product_price handler")
    print(f"[DEBUG] Received price: {message.text}")
    try:
        if not message.text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã:")
            print("[DEBUG] Invalid price format")
            return

        data = await state.get_data()
        if 'name' not in data or 'category' not in data:
            print("[ERROR] Missing required state data")
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=product_management_kb()
            )
            await state.clear()
            return

        await state.update_data(price=int(message.text))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AdminStates.setting_description)
        print(f"[DEBUG] State set to: {AdminStates.setting_description}")
    except Exception as e:
        print(f"[ERROR] Error in add_product_price: {str(e)}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=product_management_kb()
        )
        await state.clear()

@router.message(AdminStates.setting_description)
@check_admin_session
async def add_product_description(message: Message, state: FSMContext):
    print("[DEBUG] Entering add_product_description handler")
    try:
        data = await state.get_data()
        if not all(key in data for key in ['name', 'category', 'price']):
            print("[ERROR] Missing required state data")
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=product_management_kb()
            )
            await state.clear()
            return

        await state.update_data(description=message.text)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AdminStates.setting_image)
        print(f"[DEBUG] State set to: {AdminStates.setting_image}")
    except Exception as e:
        print(f"[ERROR] Error in add_product_description: {str(e)}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=product_management_kb()
        )
        await state.clear()

@router.message(AdminStates.setting_image, F.photo)
@check_admin_session
async def finish_adding_product(message: Message, state: FSMContext):
    print("[DEBUG] Entering finish_adding_product handler")
    try:
        data = await state.get_data()
        print(f"[DEBUG] State data: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['name', 'category', 'price', 'description']
        if not all(field in data for field in required_fields):
            print("[ERROR] Missing required state data")
            await message.answer(
                "–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
                reply_markup=product_management_kb()
            )
            await state.clear()
            return

        photo_id = message.photo[-1].file_id
        print(f"[DEBUG] Received photo_id: {photo_id}")
        
        product_data = {
            "name": data["name"],
            "category": data["category"],
            "price": data["price"],
            "description": data["description"],
            "photo": photo_id,
            "available": True
        }
        print(f"[DEBUG] Product data prepared: {product_data}")
        
        await db.add_product(product_data)
        print("[DEBUG] Product added to database")
        
        await message.answer(
            "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=product_management_kb()
        )
        await state.clear()
        print("[DEBUG] State cleared, product addition completed")
    except Exception as e:
        print(f"[ERROR] Error in finish_adding_product: {str(e)}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=product_management_kb()
        )
        await state.clear()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
@router.message(Command("cancel"))
@check_admin_session
async def cancel_operation(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.",
            reply_markup=product_management_kb()
        )

@router.callback_query(F.data.startswith("edit_name_"))
@check_admin_session
async def start_edit_name(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = callback.data.replace("edit_name_", "")
        product = await db.get_product(product_id)
        
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        await state.update_data(editing_product_id=product_id)
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")
            ]])
        )
        await state.set_state(AdminStates.setting_name)
        await callback.answer()
    except Exception as e:
        print(f"[ERROR] Error in start_edit_name: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("edit_price_"))
@check_admin_session
async def start_edit_price(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = callback.data.replace("edit_price_", "")
        product = await db.get_product(product_id)
        
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        await state.update_data(editing_product_id=product_id)
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {format_price(product['price'])} Tg\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")
            ]])
        )
        await state.set_state(AdminStates.setting_price)
        await callback.answer()
    except Exception as e:
        print(f"[ERROR] Error in start_edit_price: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("edit_description_"))
@check_admin_session
async def start_edit_description(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = callback.data.replace("edit_description_", "")
        product = await db.get_product(product_id)
        
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        await state.update_data(editing_product_id=product_id)
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")
            ]])
        )
        await state.set_state(AdminStates.setting_description)
        await callback.answer()
    except Exception as e:
        print(f"[ERROR] Error in start_edit_description: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("edit_photo_"))
@check_admin_session
async def start_edit_photo(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = callback.data.replace("edit_photo_", "")
        product = await db.get_product(product_id)
        
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        await state.update_data(editing_product_id=product_id)
        await callback.message.edit_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")
            ]])
        )
        await state.set_state(AdminStates.setting_image)
        await callback.answer()
    except Exception as e:
        print(f"[ERROR] Error in start_edit_photo: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("manage_flavors_"))
@check_admin_session
async def manage_flavors(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = callback.data.replace("manage_flavors_", "")
        product = await db.get_product(product_id)
        
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Save product ID in state
        await state.update_data(editing_product_id=product_id)
        
        # Create keyboard for flavor management
        keyboard = []
        flavors = product.get('flavors', [])
        
        # Add button for each flavor with delete option
        for i, flavor in enumerate(flavors):
            keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ùå {flavor}",
                    callback_data=f"delete_flavor_{product_id}_{i}"
                )
            ])
        
        # Add buttons for adding new flavor and going back
        keyboard.extend([
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å", callback_data=f"add_flavor_{product_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_product_{product_id}")]
        ])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # Show current flavors and options
        text = "üåà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏\n\n"
        if flavors:
            text += "–¢–µ–∫—É—â–∏–µ –≤–∫—É—Å—ã:\n"
            for i, flavor in enumerate(flavors, 1):
                text += f"{i}. {flavor}\n"
        else:
            text += "–£ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∫—É—Å–æ–≤\n"
        
        text += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∫—É—Å —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ, –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π"
        
        await callback.message.edit_text(text, reply_markup=markup)
        await callback.answer()
        
    except Exception as e:
        print(f"[ERROR] Error in manage_flavors: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–∫—É—Å–∞–º–∏")

@router.callback_query(F.data.startswith("delete_flavor_"))
@check_admin_session
async def delete_flavor(callback: CallbackQuery):
    try:
        # Format: delete_flavor_PRODUCTID_INDEX
        _, product_id, index = callback.data.rsplit("_", 2)
        index = int(index)
        
        # Get product
        product = await db.get_product(product_id)
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Remove flavor
        flavors = product.get('flavors', [])
        if 0 <= index < len(flavors):
            removed_flavor = flavors.pop(index)
            await db.update_product(product_id, {'flavors': flavors})
            
            # Update keyboard
            keyboard = []
            for i, flavor in enumerate(flavors):
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"‚ùå {flavor}",
                        callback_data=f"delete_flavor_{product_id}_{i}"
                    )
                ])
            keyboard.extend([
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å", callback_data=f"add_flavor_{product_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_product_{product_id}")]
            ])
            
            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            # Update message
            text = "üåà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏\n\n"
            if flavors:
                text += "–¢–µ–∫—É—â–∏–µ –≤–∫—É—Å—ã:\n"
                for i, flavor in enumerate(flavors, 1):
                    text += f"{i}. {flavor}\n"
            else:
                text += "–£ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∫—É—Å–æ–≤\n"
            
            text += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∫—É—Å —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ, –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π"
            
            await callback.message.edit_text(text, reply_markup=markup)
            await callback.answer(f"–í–∫—É—Å {removed_flavor} —É–¥–∞–ª–µ–Ω")
        else:
            await callback.answer("–í–∫—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"[ERROR] Error in delete_flavor: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∫—É—Å–∞")

@router.callback_query(F.data.startswith("add_flavor_"))
@check_admin_session
async def start_add_flavor(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = callback.data.replace("add_flavor_", "")
        product = await db.get_product(product_id)
        
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        await state.update_data(editing_product_id=product_id)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∫—É—Å –¥–ª—è —Ç–æ–≤–∞—Ä–∞.\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"manage_flavors_{product_id}")
            ]])
        )
        await state.set_state(AdminStates.adding_flavor)
        await callback.answer()
    except Exception as e:
        print(f"[ERROR] Error in start_add_flavor: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(AdminStates.adding_flavor)
@check_admin_session
async def process_add_flavor(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        product_id = data.get('editing_product_id')
        
        if not product_id:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # Get current product
        product = await db.get_product(product_id)
        if not product:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # Add new flavor
        flavors = product.get('flavors', [])
        new_flavor = message.text.strip()
        
        if new_flavor in flavors:
            await message.answer(
                "–¢–∞–∫–æ–π –≤–∫—É—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∫—É—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"manage_flavors_{product_id}")
                ]])
            )
            return
            
        flavors.append(new_flavor)
        await db.update_product(product_id, {'flavors': flavors})
        
        # Show updated flavors list
        keyboard = []
        for i, flavor in enumerate(flavors):
            keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ùå {flavor}",
                    callback_data=f"delete_flavor_{product_id}_{i}"
                )
            ])
        keyboard.extend([
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å", callback_data=f"add_flavor_{product_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_product_{product_id}")]
        ])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        text = "üåà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏\n\n"
        text += "–¢–µ–∫—É—â–∏–µ –≤–∫—É—Å—ã:\n"
        for i, flavor in enumerate(flavors, 1):
            text += f"{i}. {flavor}\n"
        
        text += f"\n‚úÖ –í–∫—É—Å '{new_flavor}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
        
        await message.answer(text, reply_markup=markup)
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Error in process_add_flavor: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∫—É—Å–∞")
        await state.clear()

@router.callback_query(F.data == "manage_flavors")
@check_admin_session
async def show_products_for_flavors(callback: CallbackQuery):
    try:
        # Get all products
        products = await db.get_all_products()
        
        if not products:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            return
            
        # Create keyboard with product list
        keyboard = []
        for product in products:
            flavor_count = len(product.get('flavors', []))
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{product['name']} ({flavor_count} –≤–∫—É—Å–æ–≤)",
                    callback_data=f"manage_flavors_{str(product['_id'])}"
                )
            ])
        
        # Add back button
        keyboard.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_product_management")
        ])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∫—É—Å–∞–º–∏:",
            reply_markup=markup
        )
        await callback.answer()
        
    except Exception as e:
        print(f"[ERROR] Error in show_products_for_flavors: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
@check_admin_session
async def show_admin_help(message: Message):
    help_text = """
<b>üî∞ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨: –ö–†–ê–¢–ö–û–ï –†–£–ö–û–í–û–î–°–¢–í–û</b>

<b>üîë –û–°–ù–û–í–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï</b>
‚Ä¢ /admin - –í—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ /logout - –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏
‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏

<b>üì¶ –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò</b>
1Ô∏è‚É£ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—É
   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ
   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ

2Ô∏è‚É£ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>
   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
   ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã
   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
   ‚Ä¢ –ó–∞–º–µ–Ω–∞ —Ñ–æ—Ç–æ
   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏

3Ô∏è‚É£ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏:</b>
   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–∫—É—Å–æ–≤
   ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤–∫—É—Å–æ–≤

<b>üìä –ó–ê–ö–ê–ó–´</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (24—á)

<b>üì¢ –†–ê–°–°–´–õ–ö–ê</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

<b>‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–¢–ö–ò</b>
‚Ä¢ –¶–µ–Ω—ã —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ Tg
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –≤—ã—Ö–æ–¥–∞

<b>üí° –°–û–í–ï–¢–´</b>
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∑–∞–∫–∞–∑—ã
‚Ä¢ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
‚Ä¢ –ü–∏—à–∏—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
"""
    
    await message.answer(
        help_text,
        parse_mode="HTML",
        reply_markup=admin_main_menu()
    )

@router.callback_query(F.data == "admin_help")
@check_admin_session
async def admin_help_callback(callback: CallbackQuery):
    help_text = """
<b>üî∞ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨: –ö–†–ê–¢–ö–û–ï –†–£–ö–û–í–û–î–°–¢–í–û</b>

<b>üîë –û–°–ù–û–í–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï</b>
‚Ä¢ /admin - –í—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ /logout - –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏
‚Ä¢ /cancel - –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏

<b>üì¶ –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò</b>
1Ô∏è‚É£ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—É
   ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ
   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ

2Ô∏è‚É£ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>
   ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
   ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã
   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
   ‚Ä¢ –ó–∞–º–µ–Ω–∞ —Ñ–æ—Ç–æ
   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏

3Ô∏è‚É£ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏:</b>
   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–∫—É—Å–æ–≤
   ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤–∫—É—Å–æ–≤

<b>üìä –ó–ê–ö–ê–ó–´</b>
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (24—á)

<b>üì¢ –†–ê–°–°–´–õ–ö–ê</b>
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

<b>‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–¢–ö–ò</b>
‚Ä¢ –¶–µ–Ω—ã —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ Tg
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –≤—ã—Ö–æ–¥–∞

<b>üí° –°–û–í–ï–¢–´</b>
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∑–∞–∫–∞–∑—ã
‚Ä¢ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
‚Ä¢ –ü–∏—à–∏—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
"""
    
    await callback.message.edit_text(
        help_text,
        parse_mode="HTML",
        reply_markup=admin_main_menu()
    )
    await callback.answer()

@router.message(F.text == "üò¥ –†–µ–∂–∏–º —Å–Ω–∞")
@check_admin_session
async def sleep_mode_menu(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ —Å–Ω–∞
        sleep_data = await db.get_sleep_mode()
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if sleep_data["enabled"] else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
        end_time = sleep_data.get("end_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        
        text = f"üåô –†–µ–∂–∏–º —Å–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞\n\n"
        text += f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}\n"
        if sleep_data["enabled"] and end_time:
            text += f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è: {end_time}\n"
        text += f"\n–í —Ä–µ–∂–∏–º–µ —Å–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã."
        
        await message.answer(
            text,
            reply_markup=sleep_mode_kb(sleep_data["enabled"])
        )
    except Exception as e:
        print(f"[ERROR] Error in sleep_mode_menu: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞")

@router.callback_query(F.data == "toggle_sleep_mode")
@check_admin_session
async def toggle_sleep_mode(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        sleep_data = await db.get_sleep_mode()
        current_mode = sleep_data["enabled"]
        
        if not current_mode:  # –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
            await callback.message.edit_text(
                "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç\n"
                "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin_menu")
                ]])
            )
            await state.set_state(AdminStates.setting_sleep_time)
        else:  # –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
            await db.set_sleep_mode(False, None)
            await callback.message.edit_text(
                "üåô –†–µ–∂–∏–º —Å–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞\n\n"
                "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ‚ùå –í—ã–∫–ª—é—á–µ–Ω\n\n"
                "–í —Ä–µ–∂–∏–º–µ —Å–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã.",
                reply_markup=sleep_mode_kb(False)
            )
        
        await callback.answer()
        
    except Exception as e:
        print(f"[ERROR] Error in toggle_sleep_mode: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞")

@router.message(AdminStates.setting_sleep_time)
@check_admin_session
async def process_sleep_time(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        time_text = message.text.strip()
        if not time_text or len(time_text.split(':')) != 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)"
            )
            return
            
        hours, minutes = map(int, time_text.split(':'))
        if not (0 <= hours <= 23 and 0 <= minutes <= 59):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59"
            )
            return
            
        # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        await db.set_sleep_mode(True, time_text)
        
        await message.answer(
            f"üåô –†–µ–∂–∏–º —Å–Ω–∞ –≤–∫–ª—é—á–µ–Ω!\n\n"
            f"–ú–∞–≥–∞–∑–∏–Ω –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç –¥–æ {time_text}\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ‚úÖ –í–∫–ª—é—á–µ–Ω",
            reply_markup=sleep_mode_kb(True)
        )
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)"
        )
    except Exception as e:
        print(f"[ERROR] Error in process_sleep_time: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏")
        await state.clear()

@router.callback_query(F.data == "back_to_admin_menu")
@check_admin_session
async def back_to_admin_menu_from_sleep(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=admin_main_menu()
    )
    await callback.answer()
