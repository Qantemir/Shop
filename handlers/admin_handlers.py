from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, timedelta
import asyncio
import logging

from config import ADMIN_ID, ADMIN_SWITCHING
from database.mongodb import db
from keyboards.admin_kb import (
    admin_main_menu,
    product_management_kb,
    categories_kb,
    order_management_kb,
    sleep_mode_kb,
    product_edit_kb  # –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
)
from keyboards.user_kb import main_menu
from utils.security import security_manager, check_admin_session, return_items_to_inventory
from utils.message_utils import safe_delete_message

router = Router()

logger = logging.getLogger(__name__)

class AdminStates(StatesGroup):
    waiting_password = State()
    adding_product = State()
    editing_product = State()
    setting_name = State()
    setting_price = State()
    setting_description = State()
    setting_image = State()
    broadcasting = State()
    confirm_broadcast = State()
    adding_flavor = State()
    editing_flavors = State()
    setting_sleep_time = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å–Ω–∞
    setting_flavor_quantity = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∫—É—Å–∞

class CancellationStates(StatesGroup):
    waiting_for_reason = State()

# Helper function to format price with decimal points
def format_price(price):
    return f"{float(price):.2f}"

@router.message(Command("admin"))#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin/
async def admin_start(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id != ADMIN_ID:
        logger.warning(f"Unauthorized /admin access by user {user_id}")
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if not security_manager.check_failed_attempts(user_id):
        minutes = security_manager.get_block_time_remaining(user_id).seconds // 60
        logger.info(f"Blocked admin access for {user_id}. Wait {minutes} min")
        await message.answer(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç.")
        return

    if security_manager.is_admin_session_valid(user_id):
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_main_menu())
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await state.set_state(AdminStates.waiting_password)

@router.message(AdminStates.waiting_password)#–û–∂–∏–¥–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
async def check_admin_password(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if user_id != ADMIN_ID:
        logger.warning(f"Unauthorized password attempt from user {user_id}")
        return

    result = security_manager.try_admin_login(user_id, message.text or "")
    
    if result['success']:
        logger.info(f"Admin login success for {user_id}")
        await message.answer("–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.", reply_markup=admin_main_menu())
        await state.clear()
    elif result['blocked']:
        logger.warning(f"Admin access temporarily blocked for {user_id}")
        await message.answer(f"–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {result['block_time']} –º–∏–Ω—É—Ç.")
        await state.clear()
    else:
        logger.warning(f"Incorrect password for {user_id}. Attempts left: {result['attempts_left']}")
        await message.answer(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {result['attempts_left']}")

@router.message(Command("logout"))#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /logout
@check_admin_session
async def admin_logout(message: Message):
    user_id = message.from_user.id

    try:
        security_manager.remove_admin_session(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id}: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=main_menu()
        )
        return

    await message.answer(
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin",
        reply_markup=main_menu()
    )

@router.message(F.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º–∏
@check_admin_session
async def product_management(message: Message):
    try:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏:",
            reply_markup=product_management_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ product_management: {e}")

@router.callback_query(F.data == "back_to_product_management")#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
@check_admin_session
async def back_to_product_management(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏:",
        reply_markup=product_management_kb()
    )
    await callback.answer()

@router.callback_query(F.data == "list_products")#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
@check_admin_session
async def list_products(callback: CallbackQuery):
    products = await db.get_all_products()

    if not products:
        await callback.message.edit_text(
            "üì≠ –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=product_management_kb()
        )
        await callback.answer()
        return

    lines = [
        f"üì¶ {p['name']}\nüí∞ {p['price']} ‚Ç∏\nüìù {p['description']}"
        for p in products
    ]
    text = "üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n" + "\n\n".join(lines)

    await callback.message.edit_text(
        text,
        reply_markup=product_management_kb()
    )
    await callback.answer()

@router.callback_query(F.data == "add_product")#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
@check_admin_session
async def add_product_start(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=categories_kb()
        )
        await state.set_state(AdminStates.setting_name)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_product_start: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=product_management_kb()
        )

@router.callback_query(F.data == "edit_products")#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
@check_admin_session
async def edit_products_list(callback: CallbackQuery):
    products = await db.get_all_products()

    if not products:
        await callback.message.edit_text(
            "üì≠ –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=product_management_kb()
        )
        await callback.answer()
        return

    text_lines = ["üõ† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"]
    keyboard = []

    for product in products:
        name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        price = product.get("price", "‚Äî")
        product_id = str(product.get("_id"))

        text_lines.append(f"üì¶ {name} ‚Äî {price} ‚Ç∏")
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚úèÔ∏è {name}",
                callback_data=f"edit_product_{product_id}"
            )
        ])

    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_product_management")
    ])

    await callback.message.edit_text(
        "\n".join(text_lines),
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()

@router.callback_query(F.data == "delete_product")#–ü–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
@check_admin_session
async def delete_product_list(callback: CallbackQuery):
    products = await db.get_all_products()

    if not products:
        await callback.message.edit_text(
            "üì≠ –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=product_management_kb()
        )
        await callback.answer()
        return

    keyboard = [
        [InlineKeyboardButton(
            text=f"‚ùå {product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}",
            callback_data=f"confirm_delete_{str(product.get('_id'))}"
        )]
        for product in products
    ]

    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_product_management")
    ])

    text = "\n".join([
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        *(f"üì¶ {p.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ‚Äî {p.get('price', '‚Äî')} ‚Ç∏" for p in products)
    ])

    await callback.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_delete_"))#–ü–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∫ —É–¥–æ–ª–µ–Ω–∏—è
@check_admin_session
async def confirm_delete_product(callback: CallbackQuery):
    product_id = callback.data.removeprefix("confirm_delete_")

    try:
        result = await db.delete_product(product_id)
        if result:
            text = "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!"
        else:
            text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —É–¥–∞–ª—ë–Ω."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞."

    await callback.message.edit_text(
        text,
        reply_markup=product_management_kb()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("edit_product_"))#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å 
async def edit_product_menu(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = callback.data.removeprefix("edit_product_")
        product = await db.get_product(product_id)

        if not product:
            await callback.answer("‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await state.update_data(editing_product_id=product_id)

        name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        price = format_price(product.get("price", 0))
        description = product.get("description", "‚Äî")

        text = f"""üõ† <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>:

    üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
    üí∞ –¶–µ–Ω–∞: {price} ‚Ç∏
    üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
    """
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
        flavors = product.get("flavors", [])
        if flavors:
            text += "\nüåà –î–æ—Å—Ç—É–ø–Ω–æ:\n"
            for flavor in flavors:
                flavor_name = flavor.get('name', '‚Äî')
                quantity = flavor.get('quantity', 0)
                text += f"‚Ä¢ {flavor_name} ‚Äî {quantity} —à—Ç.\n"

        await callback.message.edit_text(
            text,
            reply_markup=product_edit_kb(product_id),
            parse_mode="HTML"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_product_menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞.")

@router.message(AdminStates.setting_name)#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@check_admin_session
async def process_edit_name(message: Message, state: FSMContext):
    try:
        data = await state.get_data()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        if data.get('is_adding_product'):
            await state.update_data(name=message.text)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
            await state.set_state(AdminStates.setting_price)
            return

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        product_id = data.get('editing_product_id')
        if not product_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        await db.update_product(product_id, {'name': message.text})
        product = await db.get_product(product_id)

        if not product:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        price = product.get("price", "‚Äî")
        description = product.get("description", "‚Äî")
        flavors = product.get("flavors", [])

        text = f"""‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!

    üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
    üí∞ –¶–µ–Ω–∞: {price} ‚Ç∏
    üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
    """

        if flavors:
            text += "\nüåà –î–æ—Å—Ç—É–ø–Ω–æ:\n"
            for flavor in flavors:
                flavor_name = flavor.get('name', '')
                quantity = flavor.get('quantity', 0)
                text += f"‚Ä¢ {flavor_name} ‚Äî {quantity} —à—Ç.\n"

        await message.answer(text, reply_markup=product_edit_kb(product_id))
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_edit_name: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.")
        await state.clear()

@router.message(AdminStates.setting_price)#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@check_admin_session
async def handle_setting_price(message: Message, state: FSMContext):
    try:
        if not message.text or not message.text.isdigit():
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã:")
            return

        price = int(message.text)
        data = await state.get_data()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        if data.get('is_adding_product') or ('name' in data and 'category' in data and 'price' not in data):
            await state.update_data(price=price)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
            await state.set_state(AdminStates.setting_description)
            return

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        product_id = data.get('editing_product_id')
        if not product_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        await db.update_product(product_id, {'price': price})
        product = await db.get_product(product_id)

        if not product:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        price = format_price(product.get("price", 0))
        description = product.get("description", "‚Äî")
        flavors = product.get("flavors", [])

        text = f"""‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!

    üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
    üí∞ –¶–µ–Ω–∞: {price} ‚Ç∏
    üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
    """

        if flavors:
            text += "\nüåà –î–æ—Å—Ç—É–ø–Ω–æ:\n"
            for flavor in flavors:
                flavor_name = flavor.get("name", "‚Äî")
                quantity = flavor.get("quantity", 0)
                text += f"‚Ä¢ {flavor_name} ‚Äî {quantity} —à—Ç.\n"

        await message.answer(
            text,
            reply_markup=product_edit_kb(product_id),
            parse_mode="HTML"
        )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_setting_price: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã.")
        await state.clear()

@router.message(AdminStates.setting_description)#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@check_admin_session
async def handle_setting_description(message: Message, state: FSMContext):
    try:
        data = await state.get_data()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        if data.get('is_adding_product') or (
            'name' in data and 'category' in data and 'price' in data and 'description' not in data
        ):
            await state.update_data(description=message.text)
            await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞:")
            await state.set_state(AdminStates.setting_image)
            return

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        product_id = data.get('editing_product_id')
        if not product_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        await db.update_product(product_id, {'description': message.text})
        product = await db.get_product(product_id)

        if not product:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        price = format_price(product.get("price", 0))
        description = product.get("description", "‚Äî")
        flavors = product.get("flavors", [])

        text = f"""‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!

    üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
    üí∞ –¶–µ–Ω–∞: {price} ‚Ç∏
    üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
    """

        if flavors:
            text += "\nüåà –î–æ—Å—Ç—É–ø–Ω–æ:\n"
            for flavor in flavors:
                flavor_name = flavor.get("name", "‚Äî")
                quantity = flavor.get("quantity", 0)
                text += f"‚Ä¢ {flavor_name} ‚Äî {quantity} —à—Ç.\n"

        await message.answer(
            text,
            reply_markup=product_edit_kb(product_id),
            parse_mode="HTML"
        )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_setting_description: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è.")
        await state.clear()

@router.message(AdminStates.setting_image, F.photo)#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
@check_admin_session
async def process_edit_photo(message: Message, state: FSMContext):
    try:
        if not message.photo or not message.photo[-1]:
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ñ–æ—Ç–æ.")
            return

        photo_id = message.photo[-1].file_id
        data = await state.get_data()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        if data.get('is_adding_product') or (
            'name' in data and 'category' in data and 'price' in data and 'description' in data and 'photo' not in data
        ):
            product_data = {
                "name": data["name"],
                "category": data["category"],
                "price": data["price"],
                "description": data["description"],
                "photo": photo_id,
                "available": True
            }

            await db.add_product(product_data)
            await message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=product_management_kb())
            await state.clear()
            return

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
        product_id = data.get('editing_product_id')
        if not product_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        await db.update_product(product_id, {'photo': photo_id})
        product = await db.get_product(product_id)

        if not product:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        price = format_price(product.get("price", 0))
        description = product.get("description", "‚Äî")
        flavors = product.get("flavors", [])

        text = f"""‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!

    üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}
    üí∞ –¶–µ–Ω–∞: {price} ‚Ç∏
    üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}
    """

        if flavors:
            text += "\nüåà –î–æ—Å—Ç—É–ø–Ω–æ:\n"
            for flavor in flavors:
                flavor_name = flavor.get('name', '‚Äî')
                quantity = flavor.get('quantity', 0)
                text += f"‚Ä¢ {flavor_name} ‚Äî {quantity} —à—Ç.\n"

        await message.answer_photo(
            photo=photo_id,
            caption=text,
            reply_markup=product_edit_kb(product_id),
            parse_mode="HTML"
        )
        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_edit_photo: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ.")
        await state.clear()

@router.message(F.text == "üìä –ó–∞–∫–∞–∑—ã")#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑—ã
@check_admin_session
async def show_orders(message: Message, state: FSMContext):
    try:
        await db.ensure_connected()
        orders = await db.get_all_orders()

        if not orders:
            await message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
            return

        # –ü–æ–¥—Å—á—ë—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        active_orders = [o for o in orders if o.get("status") in ["pending", "confirmed"]]
        active_count = len(active_orders)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã", callback_data="delete_all_orders")]
        ])

        sent_message_ids = []
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
        for order in orders:
            order_id = str(order.get("_id", ""))
            user_data = {
                "full_name": order.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
                "username": order.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"),
            }

            order_text = await format_order_notification(
                order_id,
                user_data,
                order,
                order.get("items", []),
                order.get("total_amount", 0)
            )

            status = order.get("status", "pending")
            status_text = {
                "pending": "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                "confirmed": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω",
                "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω",
                "completed": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω"
            }.get(status, "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

            order_text += f"\n\n–°—Ç–∞—Ç—É—Å: {status_text}"

            msg = await message.answer(
                order_text,
                parse_mode="HTML",
                reply_markup=order_management_kb(order_id, status)
            )
            sent_message_ids.append(msg.message_id)

        # –ü–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∫–Ω–æ–ø–∫–∏
        stat_msg = await message.answer(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:\n"
            f"üì¶ –ó–∞–∫–∞–∑–æ–≤: {active_count}/{ADMIN_SWITCHING}\n"
            f"‚ö†Ô∏è –ú–∞–≥–∞–∑–∏–Ω —É–π–¥—ë—Ç –≤ —Ä–µ–∂–∏–º —Å–Ω–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ {ADMIN_SWITCHING} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n",
            reply_markup=keyboard
        )
        sent_message_ids.append(stat_msg.message_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏–π –≤ state
        await state.update_data(order_message_ids=sent_message_ids)

        # –ê–≤—Ç–æ–ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º
        if active_count >= ADMIN_SWITCHING:
            end_time = (datetime.now() + timedelta(hours=2)).strftime("%H:%M")
            await db.set_sleep_mode(True, end_time)
            await message.answer(
                f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–∫–∞–∑–æ–≤ ({active_count}). "
                f"–ú–∞–≥–∞–∑–∏–Ω –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Ä–µ–∂–∏–º —Å–Ω–∞ –¥–æ {end_time}."
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")

@router.callback_query(F.data == "delete_all_orders")#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
@check_admin_session
async def delete_all_orders(callback: CallbackQuery, state: FSMContext):
    try:
        orders = await db.get_all_orders()

        if not orders:
            await callback.answer("‚ùó –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        for order in orders:
            order_id = str(order.get("_id"))
            status = order.get("status")
            items = order.get("items", [])

            if status == "pending":
                for item in items:
                    product_id = item.get("product_id")
                    flavor = item.get("flavor")
                    quantity = item.get("quantity", 0)

                    if product_id and flavor:
                        try:
                            await db.update_product_flavor_quantity(product_id, flavor, quantity)
                        except Exception as e:
                            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ —Å–∫–ª–∞–¥: {e}")

            try:
                await db.delete_order(order_id)
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        data = await state.get_data()
        order_message_ids = data.get("order_message_ids", [])
        for msg_id in order_message_ids:
            try:
                await callback.bot.delete_message(callback.message.chat.id, msg_id)
            except Exception as e:
                logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")

        # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É (–∫–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        await callback.message.answer("‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.")
        await state.clear()
        await callback.answer()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")

@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∞
@check_admin_session
async def broadcast_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:"
    )
    await state.set_state(AdminStates.broadcasting)
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É")

@router.message(Command("cancel"))#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–∞
@check_admin_session
async def cancel_any_state(message: Message, state: FSMContext):
    current_state = await state.get_state()

    if current_state:
        await state.clear()
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=admin_main_menu()
        )
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state}")
    else:
        await message.answer(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=admin_main_menu()
        )

@router.message(AdminStates.broadcasting)#–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@check_admin_session
async def prepare_broadcast(message: Message, state: FSMContext):
    text = message.text.strip()

    if not text:
        await message.answer("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(broadcast_text=text)

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")
        ]
    ])

    await message.answer(
        f"üì¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{text}",
        reply_markup=keyboard
    )

    await state.set_state(AdminStates.confirm_broadcast)

SEND_DELAY = 0.05

@router.callback_query(F.data == "confirm_broadcast")
@check_admin_session
async def handle_confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    broadcast_text = data.get("broadcast_text")

    if not broadcast_text:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    users = await db.get_all_users()
    if not users:
        await callback.message.edit_text("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return

    sent_count = 0
    failed_count = 0

    for user in users:
        try:
            await callback.bot.send_message(
                chat_id=user['user_id'],
                text=broadcast_text
            )
            sent_count += 1
            await asyncio.sleep(SEND_DELAY)
        except Exception as e:
            error_text = str(e).lower()
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
            failed_count += 1
            if 'chat not found' in error_text or 'bot was blocked by the user' in error_text:
                try:
                    await db.delete_user(user['user_id'])
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['user_id']} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã (chat not found –∏–ª–∏ bot was blocked)")
                except Exception as del_e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {del_e}")
            continue

    summary = (
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"{'‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ' + str(failed_count) if failed_count else ''}"
    )

    await callback.message.edit_text(summary)
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=admin_main_menu())
    await callback.answer()

    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}, –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {failed_count}")


@router.callback_query(F.data == "cancel_broadcast")#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
@check_admin_session
async def handle_cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=admin_main_menu())
    await callback.answer()

@router.callback_query(F.data.startswith("add_to_"))#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞
@check_admin_session
async def add_product_category(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ
        await state.clear()

        category = callback.data.replace("add_to_", "")
        await state.update_data(category=category, is_adding_product=True)

        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AdminStates.setting_name)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_product_category: {e}")
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=product_management_kb()
        )

@router.callback_query(F.data.startswith("edit_name_"))#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@check_admin_session
async def start_edit_name(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()  # –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ "—á–∞—Å–∏–∫–æ–≤"
        
        product_id = callback.data.replace("edit_name_", "")
        product = await db.get_product(product_id)
        
        if not product:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await state.update_data(editing_product_id=product_id)

        cancel_kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")
        ]])

        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{product['name']}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=cancel_kb,
            parse_mode="HTML"
        )

        await state.set_state(AdminStates.setting_name)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_edit_name: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("edit_price_"))#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
@check_admin_session
async def start_edit_price(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏"

        product_id = callback.data.replace("edit_price_", "")
        product = await db.get_product(product_id)
        
        if not product:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await state.update_data(editing_product_id=product_id)

        cancel_kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")
        ]])

        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{format_price(product['price'])} ‚Ç∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
            reply_markup=cancel_kb,
            parse_mode="HTML"
        )

        await state.set_state(AdminStates.setting_price)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_edit_price: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("edit_description_"))#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@check_admin_session
async def start_edit_description(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()  # –ì–∞—Å–∏–º "—á–∞—Å–∏–∫–∏" —Å—Ä–∞–∑—É

        product_id = callback.data.replace("edit_description_", "")
        product = await db.get_product(product_id)

        if not product:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await state.update_data(editing_product_id=product_id)

        cancel_kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")
        ]])

        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n<blockquote>{product['description']}</blockquote>\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=cancel_kb,
            parse_mode="HTML"
        )

        await state.set_state(AdminStates.setting_description)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_edit_description: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("edit_photo_"))#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
@check_admin_session
async def start_edit_photo(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º "—á–∞—Å–∏–∫–∏"

        product_id = callback.data.replace("edit_photo_", "")
        product = await db.get_product(product_id)

        if not product:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await state.update_data(editing_product_id=product_id)

        cancel_kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"edit_product_{product_id}")
        ]])

        await callback.message.edit_text(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            reply_markup=cancel_kb
        )

        await state.set_state(AdminStates.setting_image)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_edit_photo: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("manage_flavors_"))#–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∫—É—Å–∞–º–∏
@check_admin_session
async def manage_flavors(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.answer()  # –°—Ä–∞–∑—É —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"

        product_id = callback.data.replace("manage_flavors_", "")
        product = await db.get_product(product_id)

        if not product:
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await state.update_data(editing_product_id=product_id)

        flavors = product.get('flavors', [])
        keyboard = []

        for i, flavor in enumerate(flavors):
            name = flavor.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            qty = flavor.get('quantity', 0)

            keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ùå {name} ({qty} —à—Ç.)",
                    callback_data=f"delete_flavor_{product_id}_{i}"
                )
            ])
            keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–ª—è {name}",
                    callback_data=f"add_flavor_quantity_{product_id}_{i}"
                )
            ])

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å", callback_data=f"add_flavor_{product_id}")])
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_product_{product_id}")])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = "üåà <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏</b>\n\n"
        if flavors:
            text += "–í –Ω–∞–ª–∏—á–∏–∏:\n"
            for i, flavor in enumerate(flavors, 1):
                name = flavor.get('name', '')
                qty = flavor.get('quantity', 0)
                text += f"{i}. {name} ‚Äî {qty} —à—Ç.\n"
        else:
            text += "–ü–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∫—É—Å–∞.\n"

        text += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∫—É—Å, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å, –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π."

        await callback.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )

    except Exception as e:
        print(f"[ERROR] Error in manage_flavors: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–∫—É—Å–∞–º–∏")

@router.callback_query(F.data.startswith("delete_flavor_"))
@check_admin_session
async def delete_flavor(callback: CallbackQuery):
    try:
        # Format: delete_flavor_PRODUCTID_INDEX
        _, product_id, index = callback.data.rsplit("_", 2)
        index = int(index)
        
        # Get product
        product = await db.get_product(product_id)
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Remove flavor
        flavors = product.get('flavors', [])
        if 0 <= index < len(flavors):
            removed_flavor = flavors[index].get('name', '')
            flavors.pop(index)
            await db.update_product(product_id, {'flavors': flavors})
            
            # Update keyboard
            keyboard = []
            for i, flavor in enumerate(flavors):
                flavor_name = flavor.get('name', '')
                flavor_quantity = flavor.get('quantity', 0)
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"‚ùå {flavor_name} ({flavor_quantity} —à—Ç.)",
                        callback_data=f"delete_flavor_{product_id}_{i}"
                    )
                ])
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {flavor_name}",
                        callback_data=f"add_flavor_quantity_{product_id}_{i}"
                    )
                ])
            keyboard.extend([
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å", callback_data=f"add_flavor_{product_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_product_{product_id}")]
            ])
            
            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            # Update message
            text = "üåà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏\n\n"
            if flavors:
                text += "–¢–µ–∫—É—â–∏–µ –≤–∫—É—Å—ã:\n"
                for i, flavor in enumerate(flavors, 1):
                    flavor_name = flavor.get('name', '')
                    flavor_quantity = flavor.get('quantity', 0)
                    text += f"{i}. {flavor_name} - {flavor_quantity} —à—Ç.\n"
            else:
                text += "–£ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∫—É—Å–æ–≤\n"
            
            text += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∫—É—Å —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ, –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π"
            
            await callback.message.edit_text(text, reply_markup=markup)
            await callback.answer(f"–í–∫—É—Å {removed_flavor} —É–¥–∞–ª–µ–Ω")
        else:
            await callback.answer("–í–∫—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"[ERROR] Error in delete_flavor: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∫—É—Å–∞")

@router.callback_query(F.data.startswith("add_flavor_quantity_"))
@check_admin_session
async def start_add_flavor_quantity(callback: CallbackQuery, state: FSMContext):
    try:
        # Format: add_flavor_quantity_PRODUCTID_INDEX
        _, product_id, index = callback.data.rsplit("_", 2)
        index = int(index)
        
        # Get product
        product = await db.get_product(product_id)
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        flavors = product.get('flavors', [])
        if 0 <= index < len(flavors):
            flavor = flavors[index]
            await state.update_data(
                editing_product_id=product_id,
                editing_flavor_index=index
            )
            
            await callback.message.edit_text(
                f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤–∫—É—Å–∞ '{flavor.get('name')}': {flavor.get('quantity', 0)} —à—Ç.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"manage_flavors_{product_id}")
                ]])
            )
            await state.set_state(AdminStates.setting_flavor_quantity)
            await callback.answer()
        else:
            await callback.answer("–í–∫—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"[ERROR] Error in start_add_flavor_quantity: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(AdminStates.setting_flavor_quantity)
@check_admin_session
async def process_flavor_quantity(message: Message, state: FSMContext):
    try:
        if not message.text.isdigit():
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ")
            return
            
        quantity = int(message.text)
        data = await state.get_data()
        product_id = data.get('editing_product_id')
        flavor_index = data.get('editing_flavor_index')
        
        if not product_id or flavor_index is None:
            await message.answer("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await state.clear()
            return
            
        # Get product
        product = await db.get_product(product_id)
        if not product:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        flavors = product.get('flavors', [])
        if 0 <= flavor_index < len(flavors):
            flavors[flavor_index]['quantity'] = quantity
            await db.update_product(product_id, {'flavors': flavors})
            
            # Create keyboard for flavor management
            keyboard = []
            for i, flavor in enumerate(flavors):
                flavor_name = flavor.get('name', '')
                flavor_quantity = flavor.get('quantity', 0)
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"‚ùå {flavor_name} ({flavor_quantity} —à—Ç.)",
                        callback_data=f"delete_flavor_{product_id}_{i}"
                    )
                ])
                keyboard.append([
                    InlineKeyboardButton(
                        text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {flavor_name}",
                        callback_data=f"add_flavor_quantity_{product_id}_{i}"
                    )
                ])
            keyboard.extend([
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å", callback_data=f"add_flavor_{product_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_product_{product_id}")]
            ])
            
            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            # Show current flavors and options
            text = "üåà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏\n\n"
            if flavors:
                text += "–¢–µ–∫—É—â–∏–µ –≤–∫—É—Å—ã:\n"
                for i, flavor in enumerate(flavors, 1):
                    flavor_name = flavor.get('name', '')
                    flavor_quantity = flavor.get('quantity', 0)
                    text += f"{i}. {flavor_name} - {flavor_quantity} —à—Ç.\n"
            else:
                text += "–£ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∫—É—Å–æ–≤\n"
            
            text += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∫—É—Å —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ, –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π"
            
            await message.answer(text, reply_markup=markup)
        else:
            await message.answer("–í–∫—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Error in process_flavor_quantity: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")
        await state.clear()

@router.callback_query(F.data.startswith("add_flavor_"))
@check_admin_session
async def start_add_flavor(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = callback.data.replace("add_flavor_", "")
        product = await db.get_product(product_id)
        
        if not product:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        await state.update_data(editing_product_id=product_id)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∫—É—Å–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"manage_flavors_{product_id}")
            ]])
        )
        await state.set_state(AdminStates.adding_flavor)
        await callback.answer()
    except Exception as e:
        print(f"[ERROR] Error in start_add_flavor: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(AdminStates.adding_flavor)
@check_admin_session
async def process_add_flavor(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        product_id = data.get('editing_product_id')
        
        if not product_id:
            await message.answer("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # Get current product
        product = await db.get_product(product_id)
        if not product:
            await message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # Add new flavor
        flavors = product.get('flavors', [])
        new_flavor = message.text.strip()
        
        # Check if flavor name already exists
        if any(flavor.get('name') == new_flavor for flavor in flavors):
            await message.answer(
                "–¢–∞–∫–æ–π –≤–∫—É—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∫—É—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"manage_flavors_{product_id}")
                ]])
            )
            return
            
        # Add new flavor with initial quantity 0
        flavors.append({
            'name': new_flavor,
            'quantity': 0
        })
        
        # Update product with new flavor
        await db.update_product(product_id, {'flavors': flavors})
        
        # Create keyboard for flavor management
        keyboard = []
        for i, flavor in enumerate(flavors):
            flavor_name = flavor.get('name', '')
            flavor_quantity = flavor.get('quantity', 0)
            keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ùå {flavor_name} ({flavor_quantity} —à—Ç.)",
                    callback_data=f"delete_flavor_{product_id}_{i}"
                )
            ])
            keyboard.append([
                InlineKeyboardButton(
                    text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {flavor_name}",
                    callback_data=f"add_flavor_quantity_{product_id}_{i}"
                )
            ])
        keyboard.extend([
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å", callback_data=f"add_flavor_{product_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_product_{product_id}")]
        ])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # Show current flavors and options
        text = "üåà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏\n\n"
        if flavors:
            text += "–¢–µ–∫—É—â–∏–µ –≤–∫—É—Å—ã:\n"
            for i, flavor in enumerate(flavors, 1):
                flavor_name = flavor.get('name', '')
                flavor_quantity = flavor.get('quantity', 0)
                text += f"{i}. {flavor_name} - {flavor_quantity} —à—Ç.\n"
        else:
            text += "–£ —Ç–æ–≤–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∫—É—Å–æ–≤\n"
        
        text += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–∫—É—Å —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ, –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π"
        
        await message.answer(text, reply_markup=markup)
        await state.clear()
        
    except Exception as e:
        print(f"[ERROR] Error in process_add_flavor: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∫—É—Å–∞")
        await state.clear()

@router.callback_query(F.data == "manage_flavors")
@check_admin_session
async def show_products_for_flavors(callback: CallbackQuery):
    try:
        # Get all products
        products = await db.get_all_products()
        
        if not products:
            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
            return
            
        # Create keyboard with product list
        keyboard = []
        for product in products:
            flavor_count = len(product.get('flavors', []))
            keyboard.append([
                InlineKeyboardButton(
                    text=f"{product['name']} ({flavor_count} –≤–∫—É—Å–æ–≤)",
                    callback_data=f"manage_flavors_{str(product['_id'])}"
                )
            ])
        
        # Add back button
        keyboard.append([
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_product_management")
        ])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∫—É—Å–∞–º–∏:",
            reply_markup=markup
        )
        await callback.answer()
        
    except Exception as e:
        print(f"[ERROR] Error in show_products_for_flavors: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
@check_admin_session
async def show_admin_help(message: Message):
    help_text = """
    <b>üî∞ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨: –ö–†–ê–¢–ö–û–ï –†–£–ö–û–í–û–î–°–¢–í–û</b>

    <b>üîë –û–°–ù–û–í–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï</b>
    ‚Ä¢ /admin - –í—Ö–æ–¥ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    ‚Ä¢ /logout - –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏

    <b>üì¶ –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò</b>
    1Ô∏è‚É£ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>
    ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—É
    ‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    ‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ
    ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∫—É—Å—ã –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    2Ô∏è‚É£ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b>
    ‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ü–µ–Ω—ã
    ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    ‚Ä¢ –ó–∞–º–µ–Ω–∞ —Ñ–æ—Ç–æ
    ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º

    3Ô∏è‚É£ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞–º–∏:</b>
    ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–∫—É—Å–æ–≤
    ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∫—É—Å–æ–≤
    ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∫—É—Å–∞
    ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –≤–∫—É—Å–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

    <b>üìä –ó–ê–ö–ê–ó–´</b>
    ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
    ‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
    ‚Ä¢ –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–æ–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã
    ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö/–æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (24—á)
    ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–¥—Ä–µ—Å–∞ —Å 2GIS —Å—Å—ã–ª–∫–æ–π
    ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫–æ–≤ –æ–ø–ª–∞—Ç—ã

    <b>üì¢ –†–ê–°–°–´–õ–ö–ê</b>
    ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    ‚Ä¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    ‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

    <b>üò¥ –†–ï–ñ–ò–ú –°–ù–ê</b>
    ‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞
    ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è
    ‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è

    <b>‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ó–ê–ú–ï–¢–ö–ò</b>
    ‚Ä¢ –¶–µ–Ω—ã —É–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ ‚Ç∏
    ‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    ‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–æ–≤
    ‚Ä¢ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ –≤—ã—Ö–æ–¥–∞
    ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
    ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–µ–∂–∏–º–æ–º —Å–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞

    <b>üí° –°–û–í–ï–¢–´</b>
    ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∑–∞–∫–∞–∑—ã
    ‚Ä¢ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
    ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
    ‚Ä¢ –ü–∏—à–∏—Ç–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
    ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∫—É—Å–æ–≤
    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ —Å–Ω–∞
    """
    
    await message.answer(
        help_text,
        parse_mode="HTML",
        reply_markup=admin_main_menu()
    )

@router.message(F.text == "üò¥ –†–µ–∂–∏–º —Å–Ω–∞")
@check_admin_session
async def sleep_mode_menu(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞ —Å–Ω–∞
        sleep_data = await db.get_sleep_mode()
        if sleep_data is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞")
            return
            
        status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if sleep_data["enabled"] else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
        end_time = sleep_data.get("end_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        
        text = f"üåô –†–µ–∂–∏–º —Å–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞\n\n"
        text += f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}\n"
        if sleep_data["enabled"] and end_time:
            text += f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è: {end_time}\n"
        text += f"\n–í —Ä–µ–∂–∏–º–µ —Å–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã."
        
        await message.answer(
            text,
            reply_markup=sleep_mode_kb(sleep_data["enabled"])
        )
    except Exception as e:
        logger.error(f"Error in sleep_mode_menu: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞")

@router.callback_query(F.data == "toggle_sleep_mode")
@check_admin_session
async def toggle_sleep_mode(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        sleep_data = await db.get_sleep_mode()
        if sleep_data is None:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞")
            await callback.answer()
            return
            
        current_mode = sleep_data["enabled"]
        
        if not current_mode:  # –ï—Å–ª–∏ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
            await callback.message.edit_text(
                "üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç\n"
                "‚ùó‚ùó–ú–ê–ì–ê–ó–ò–ù –ù–ï –í–´–•–û–î–ò–¢ –ò–ó –†–ï–ñ–ò–ú–ê –°–ù–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò‚ùó‚ùó\n"
                "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_admin_menu")
                ]])
            )
            await state.set_state(AdminStates.setting_sleep_time)
        else:  # –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞
            try:
                await db.set_sleep_mode(False, None)
                await callback.message.edit_text(
                    "üåô –†–µ–∂–∏–º —Å–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞\n\n"
                    "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ‚ùå –í—ã–∫–ª—é—á–µ–Ω\n\n"
                    "–í —Ä–µ–∂–∏–º–µ —Å–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã.",
                    reply_markup=sleep_mode_kb(False)
                )
            except Exception as e:
                logger.error(f"Error setting sleep mode: {str(e)}")
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞")
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in toggle_sleep_mode: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞")

@router.message(AdminStates.setting_sleep_time)
@check_admin_session
async def process_sleep_time(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        time_text = message.text.strip()
        if not time_text or len(time_text.split(':')) != 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)"
            )
            return
            
        hours, minutes = map(int, time_text.split(':'))
        if not (0 <= hours <= 23 and 0 <= minutes <= 59):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59"
            )
            return
            
        # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Å–Ω–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        try:
            await db.set_sleep_mode(True, time_text)
            await message.answer(
                f"üåô –†–µ–∂–∏–º —Å–Ω–∞ –≤–∫–ª—é—á–µ–Ω!\n\n"
                f"–ú–∞–≥–∞–∑–∏–Ω –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç –¥–æ {time_text}\n"
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ‚úÖ –í–∫–ª—é—á–µ–Ω",
                reply_markup=sleep_mode_kb(True)
            )
        except Exception as e:
            logger.error(f"Error setting sleep mode: {str(e)}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞")
            
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00)"
        )
    except Exception as e:
        logger.error(f"Error in process_sleep_time: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞")
        await state.clear()

async def format_order_notification(order_id: str, user_data: dict, order_data: dict, cart: list, total: float) -> str:
    """Format order notification for admin"""
    # Safely get user data with fallbacks
    full_name = user_data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    username = user_data.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    text = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n\n"
        f"üë§ –û—Ç: {full_name} (@{username})\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìç –ê–¥—Ä–µ—Å: {order_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üó∫ 2GIS: {order_data.get('gis_link', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"üõç –¢–æ–≤–∞—Ä—ã:\n"
    )
    
    for item in cart:
        subtotal = item['price'] * item['quantity']
        text += f"- {item['name']}"
        if 'flavor' in item:
            text += f" (üåà {item['flavor']})"
        text += f" x{item['quantity']} = {format_price(subtotal)} ‚Ç∏\n"
    
    text += f"\nüí∞ –ò—Ç–æ–≥–æ: {format_price(total)} ‚Ç∏"
    return text

@router.callback_query(F.data.startswith("admin_confirm_"))
async def admin_confirm_order(callback: CallbackQuery):
    try:
        order_id = callback.data.replace("admin_confirm_", "")
        order = await db.get_order(order_id)
        
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Check if order is already cancelled
        if order.get('status') == 'cancelled':
            await callback.answer("–ù–µ–ª—å–∑—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑", show_alert=True)
            return
            
        # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        products_to_check = set()
        
        # Update product quantities
        for item in order['items']:
            product = await db.get_product(item['product_id'])
            if product and 'flavor' in item:
                flavors = product.get('flavors', [])
                flavor = next((f for f in flavors if f.get('name') == item['flavor']), None)
                if flavor:
                    try:
                        flavor['quantity'] -= item['quantity']
                        await db.update_product(item['product_id'], {'flavors': flavors})
                        products_to_check.add(item['product_id'])
                    except Exception as e:
                        print(f"[ERROR] Failed to update flavor quantity: {str(e)}")
                        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞", show_alert=True)
                        return

        # –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –≤—Å–µ –≤–∫—É—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        for product_id in products_to_check:
            product = await db.get_product(product_id)
            if product:
                flavors = product.get('flavors', [])
                if all(f.get('quantity', 0) == 0 for f in flavors):
                    try:
                        await db.delete_product(product_id)
                    except Exception as e:
                        print(f"[ERROR] Failed to delete empty product: {str(e)}")
        
        # Update order status
        try:
            await db.update_order(order_id, {'status': 'confirmed'})
            
            # Notify user about confirmation
            user_notification = (
                "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞!\n\n"
                "‚ùó‚ùó‚ùó –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: 1000 ‚Ç∏ (–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏) ‚ùó‚ùó‚ùó\n"
                "üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ø–Ω–¥–µ–∫—Å, –≤ –∞–∫–∫–∞—É–Ω—Ç–µ, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º –∫ –Ω–æ–º–µ—Ä—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.\n"
                "‚ö†Ô∏è –í–ê–ñ–ù–û: –í—Å—Ç—Ä–µ—á–∞–π—Ç–µ –∫—É—Ä—å–µ—Ä–∞ –ª–∏—á–Ω–æ - –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! ‚ù§Ô∏è\n"
            )
            
            try:
                await callback.bot.send_message(
                    chat_id=order['user_id'],
                    text=user_notification
                )
            except Exception as e:
                print(f"[ERROR] Failed to notify user about order confirmation: {str(e)}")
            
            # Delete the original message
            await safe_delete_message(callback.message)
            
            # Send confirmation to admin
            await callback.message.answer(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä—É –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞"
            )
            
            await callback.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–µ—Ä–µ–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä—É –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞")
        except Exception as e:
            print(f"[ERROR] Failed to update order status: {str(e)}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
            return
            
    except Exception as e:
        print(f"[ERROR] Error in admin_confirm_order: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)

@router.callback_query(F.data.startswith("delete_order_"))
@check_admin_session
async def delete_order(callback: CallbackQuery):
    try:
        logger.info("Starting delete_order handler")
        order_id = callback.data.replace("delete_order_", "")
        logger.info(f"Order ID to delete: {order_id}")
        
        # Get order details
        order = await db.get_order(order_id)
        if not order:
            logger.error(f"Order not found: {order_id}")
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        logger.info(f"Found order: {order}")
        
        # Return all flavors to inventory using common function
        success = await return_items_to_inventory(order.get('items', []))
        if not success:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥", show_alert=True)
            return
        
        # Delete the order
        logger.info("Deleting order from database")
        delete_result = await db.delete_order(order_id)
        if not delete_result:
            logger.error("Failed to delete order")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")
            return
        
        # Notify user about order cancellation
        try:
            await callback.bot.send_message(
                chat_id=order['user_id'],
                text="‚ùå –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            )
            logger.info(f"Sent cancellation notification to user {order['user_id']}")
        except Exception as e:
            logger.error(f"Error notifying user about order cancellation: {e}")
        
        # Update admin message
        await callback.message.edit_text(
            "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω\n–í—Å–µ —Ç–æ–≤–∞—Ä—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥",
            reply_markup=order_management_kb()
        )
        await callback.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
        logger.info("Order successfully cancelled and items restored to inventory")
        
    except Exception as e:
        logger.error(f"Error in delete_order: {str(e)}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞")

@router.callback_query(F.data.startswith("admin_cancel_"))
@check_admin_session
async def admin_cancel_order(callback: CallbackQuery, state: FSMContext):
    try:
        order_id = callback.data.replace("admin_cancel_", "")
        order = await db.get_order(order_id)
        
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Check if order is already cancelled
        if order.get('status') == 'cancelled':
            await callback.answer("–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
            return
            
        # Save order info in state for cancellation reason
        await state.update_data({
            'order_id': order_id,
            'message_id': callback.message.message_id,
            'chat_id': callback.message.chat.id
        })
        
        # Ask for cancellation reason
        await callback.message.edit_text(
            f"‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ #{order_id}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"back_to_order_{order_id}")]
            ])
        )
        
        await state.set_state(CancellationStates.waiting_for_reason)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in admin_cancel_order: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞", show_alert=True)

@router.callback_query(F.data.startswith("back_to_order_"))
@check_admin_session
async def back_to_order_from_cancel(callback: CallbackQuery, state: FSMContext):
    try:
        order_id = callback.data.replace("back_to_order_", "")
        order = await db.get_order(order_id)
        
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # Format order text
        user_data = {
            'full_name': order.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            'username': order.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        }
        
        order_text = await format_order_notification(
            str(order["_id"]),
            user_data,
            order,
            order.get("items", []),
            order.get("total_amount", 0)
        )
        
        # Add status to the order text
        status_text = {
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
            'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
            'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω'
        }.get(order.get('status', 'pending'), '–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        
        order_text += f"\n\n–°—Ç–∞—Ç—É—Å: {status_text}"
        
        # Restore original order message
        await callback.message.edit_text(
            order_text,
            parse_mode="HTML",
            reply_markup=order_management_kb(str(order["_id"]), order.get('status', 'pending'))
        )
        
        await state.clear()
        await callback.answer("–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞")
        
    except Exception as e:
        logger.error(f"Error in back_to_order_from_cancel: {str(e)}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(CancellationStates.waiting_for_reason)
async def admin_finish_cancel_order(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        order_id = data.get('order_id')
        original_message_id = data.get('message_id')
        chat_id = data.get('chat_id')
        
        if not order_id:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–∫–∞–∑–∞")
            await state.clear()
            return
            
        order = await db.get_order(order_id)
        if not order:
            await message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
            
        # Check if order is already cancelled
        if order.get('status') == 'cancelled':
            await message.answer("–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω")
            await state.clear()
            return
            
        logger.info(f"Processing order cancellation: {order}")
        
        # Return all items to inventory using common function
        success = await return_items_to_inventory(order.get('items', []))
        if not success:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥")
            await state.clear()
            return
        
        # Update order status and save cancellation reason
        await db.update_order(order_id, {
            'status': 'cancelled',
            'cancellation_reason': message.text
        })
        
        # Notify user about cancellation
        user_notification = (
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {message.text}\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏."
        )
        
        try:
            await message.bot.send_message(
                chat_id=order['user_id'],
                text=user_notification
            )
        except Exception as e:
            logger.error(f"Failed to notify user about order cancellation: {e}")
        
        # Delete the original order message
        try:
            await safe_delete_message(message.bot, chat_id, original_message_id)
        except Exception as e:
            logger.error(f"Failed to delete original message: {e}")
        
        # Confirm to admin
        await message.answer(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω. –ö–ª–∏–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–º–µ–Ω—ã.")
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in admin_finish_cancel_order: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞")
        await state.clear()
