from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
import logging

from config import ADMIN_ID
from utils.security import security_manager, check_admin_session
from utils.text_manager import (
    load_texts, get_text, update_text, get_all_texts, 
    get_text_info, EDITABLE_TEXT_KEYS, initialize_texts, is_cache_empty, is_cache_loaded
)

router = Router()
logger = logging.getLogger(__name__)

class TextEditStates(StatesGroup):
    waiting_for_text_key = State()
    waiting_for_new_text = State()

@router.message(Command("texts"))
@check_admin_session
async def show_texts_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞–º–∏"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã –µ—Å–ª–∏ –∫—ç—à –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        if not is_cache_loaded():
            await load_texts()
        
        keyboard = []
        for key in EDITABLE_TEXT_KEYS:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            current_text = get_text(key, "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–µ
            display_text = current_text[:30] + "..." if len(current_text) > 30 else current_text
            display_text = display_text.replace('\n', ' ').strip()
            
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìù {key}",
                    callback_data=f"view_text_{key}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à", callback_data="refresh_texts_cache")
        ])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await message.answer(
            "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_texts_menu: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–∫—Å—Ç–æ–≤")

@router.callback_query(F.data == "refresh_texts_cache")
@check_admin_session
async def refresh_texts_cache(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à —Ç–µ–∫—Å—Ç–æ–≤"""
    try:
        success = await load_texts()
        if success:
            await callback.answer("‚úÖ –ö—ç—à —Ç–µ–∫—Å—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("view_text_"))
@check_admin_session
async def view_text(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        key = callback.data.replace("view_text_", "")
        
        if key not in EDITABLE_TEXT_KEYS:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á —Ç–µ–∫—Å—Ç–∞")
            return
        
        text_info = get_text_info(key)
        if not text_info:
            await callback.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        current_text = text_info['value']
        hash_value = text_info['hash']
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_text_{key}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_texts_menu")]
        ]
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        display_text = current_text
        if len(display_text) > 1000:
            display_text = display_text[:1000] + "\n\n... (—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)"
        
        await callback.message.edit_text(
            f"üìù <b>{key}</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n\n"
            f"<code>{display_text}</code>\n\n"
            f"–•–µ—à: <code>{hash_value}</code>",
            reply_markup=markup,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_text: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç–µ–∫—Å—Ç–∞")

@router.callback_query(F.data.startswith("edit_text_"))
@check_admin_session
async def start_edit_text(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
    try:
        key = callback.data.replace("edit_text_", "")
        
        if key not in EDITABLE_TEXT_KEYS:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á —Ç–µ–∫—Å—Ç–∞")
            return
        
        text_info = get_text_info(key)
        if not text_info:
            await callback.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        current_text = text_info['value']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(editing_text_key=key)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
        keyboard = [
            [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=f"view_text_{key}")]
        ]
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞: <b>{key}</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n\n"
            f"<code>{current_text}</code>\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
            reply_markup=markup,
            parse_mode="HTML"
        )
        
        await state.set_state(TextEditStates.waiting_for_new_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_edit_text: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

@router.message(TextEditStates.waiting_for_new_text)
@check_admin_session
async def save_new_text(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç"""
    try:
        data = await state.get_data()
        key = data.get('editing_text_key')
        
        if not key or key not in EDITABLE_TEXT_KEYS:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á —Ç–µ–∫—Å—Ç–∞")
            await state.clear()
            return
        
        new_text = message.text.strip()
        if not new_text:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        success = await update_text(key, new_text)
        
        if success:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ–∫—Å—Ç–∞–º", callback_data="back_to_texts_menu")]
            ]
            markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await message.answer(
                f"‚úÖ –¢–µ–∫—Å—Ç <b>{key}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:\n\n"
                f"<code>{new_text}</code>",
                reply_markup=markup,
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ save_new_text: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        await state.clear()

@router.callback_query(F.data == "back_to_texts_menu")
@check_admin_session
async def back_to_texts_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Ç–µ–∫—Å—Ç–æ–≤"""
    try:
        keyboard = []
        for key in EDITABLE_TEXT_KEYS:
            current_text = get_text(key, "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            display_text = current_text[:30] + "..." if len(current_text) > 30 else current_text
            display_text = display_text.replace('\n', ' ').strip()
            
            keyboard.append([
                InlineKeyboardButton(
                    text=f"üìù {key}",
                    callback_data=f"view_text_{key}"
                )
            ])
        
        keyboard.append([
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à", callback_data="refresh_texts_cache")
        ])
        
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        await callback.message.edit_text(
            "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_texts_menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.message(Command("init_texts"))
@check_admin_session
async def initialize_texts_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤ –≤ –±–∞–∑–µ"""
    try:
        await message.answer("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        success = await initialize_texts()
        if success:
            await load_texts()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –∫—ç—à
            await message.answer("‚úÖ –¢–µ–∫—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤") 