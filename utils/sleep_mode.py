from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from database import db
from config import ADMIN_SWITCHING
import logging
from datetime import datetime, timedelta
from typing import Union

sleep_log = logging.getLogger(__name__)

async def check_sleep_mode(obj: Union[Message, CallbackQuery]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω —Å–ø–∏—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ"""

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Å–Ω–∞
        approved_count = await db.count_approved_orders()
        if approved_count >= ADMIN_SWITCHING:
            sleep_data = await db.get_sleep_mode()
            if not sleep_data or not sleep_data.get("enabled", False):
                end_time = (datetime.now() + timedelta(hours=2)).strftime("%H:%M")
                await db.set_sleep_mode(True, end_time)
                sleep_data = {"enabled": True, "end_time": end_time}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Å–Ω–∞
        sleep_data = await db.get_sleep_mode()
        if sleep_data is None:
            sleep_log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ sleep_mode")
            return False

        if sleep_data.get("enabled", False):
            end_time = sleep_data.get("end_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            help_button = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")]
            ])

            text = (
                f"üò¥ –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n"
                f"–†–∞–±–æ—Ç–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è –≤ {end_time}.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –ø—Ä–∏–¥–µ—Ç."
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
            if isinstance(obj, Message):
                await obj.answer(text, reply_markup=help_button)
            elif isinstance(obj, CallbackQuery):
                await obj.answer(text, reply_markup=help_button, show_alert=True)

            return True

        return False

    except Exception as e:
        sleep_log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞: {e}")
        return False
